// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.googlemaps;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Messages {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
          "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError(
        "channel-error", "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Pigeon equivalent of MapType */
  public enum PlatformMapType {
    NONE(0),
    NORMAL(1),
    SATELLITE(2),
    TERRAIN(3),
    HYBRID(4);

    final int index;

    private PlatformMapType(final int index) {
      this.index = index;
    }
  }

  public enum PlatformRendererType {
    LEGACY(0),
    LATEST(1);

    final int index;

    private PlatformRendererType(final int index) {
      this.index = index;
    }
  }

  public enum PlatformJointType {
    MITERED(0),
    BEVEL(1),
    ROUND(2);

    final int index;

    private PlatformJointType(final int index) {
      this.index = index;
    }
  }

  /**
   * Pigeon representatation of a CameraPosition.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformCameraPosition {
    private @NonNull Double bearing;

    public @NonNull Double getBearing() {
      return bearing;
    }

    public void setBearing(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bearing\" is null.");
      }
      this.bearing = setterArg;
    }

    private @NonNull PlatformLatLng target;

    public @NonNull PlatformLatLng getTarget() {
      return target;
    }

    public void setTarget(@NonNull PlatformLatLng setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"target\" is null.");
      }
      this.target = setterArg;
    }

    private @NonNull Double tilt;

    public @NonNull Double getTilt() {
      return tilt;
    }

    public void setTilt(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"tilt\" is null.");
      }
      this.tilt = setterArg;
    }

    private @NonNull Double zoom;

    public @NonNull Double getZoom() {
      return zoom;
    }

    public void setZoom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"zoom\" is null.");
      }
      this.zoom = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformCameraPosition() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformCameraPosition that = (PlatformCameraPosition) o;
      return bearing.equals(that.bearing)
          && target.equals(that.target)
          && tilt.equals(that.tilt)
          && zoom.equals(that.zoom);
    }

    @Override
    public int hashCode() {
      return Objects.hash(bearing, target, tilt, zoom);
    }

    public static final class Builder {

      private @Nullable Double bearing;

      @CanIgnoreReturnValue
      public @NonNull Builder setBearing(@NonNull Double setterArg) {
        this.bearing = setterArg;
        return this;
      }

      private @Nullable PlatformLatLng target;

      @CanIgnoreReturnValue
      public @NonNull Builder setTarget(@NonNull PlatformLatLng setterArg) {
        this.target = setterArg;
        return this;
      }

      private @Nullable Double tilt;

      @CanIgnoreReturnValue
      public @NonNull Builder setTilt(@NonNull Double setterArg) {
        this.tilt = setterArg;
        return this;
      }

      private @Nullable Double zoom;

      @CanIgnoreReturnValue
      public @NonNull Builder setZoom(@NonNull Double setterArg) {
        this.zoom = setterArg;
        return this;
      }

      public @NonNull PlatformCameraPosition build() {
        PlatformCameraPosition pigeonReturn = new PlatformCameraPosition();
        pigeonReturn.setBearing(bearing);
        pigeonReturn.setTarget(target);
        pigeonReturn.setTilt(tilt);
        pigeonReturn.setZoom(zoom);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(bearing);
      toListResult.add(target);
      toListResult.add(tilt);
      toListResult.add(zoom);
      return toListResult;
    }

    static @NonNull PlatformCameraPosition fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformCameraPosition pigeonResult = new PlatformCameraPosition();
      Object bearing = __pigeon_list.get(0);
      pigeonResult.setBearing((Double) bearing);
      Object target = __pigeon_list.get(1);
      pigeonResult.setTarget((PlatformLatLng) target);
      Object tilt = __pigeon_list.get(2);
      pigeonResult.setTilt((Double) tilt);
      Object zoom = __pigeon_list.get(3);
      pigeonResult.setZoom((Double) zoom);
      return pigeonResult;
    }
  }

  /**
   * Pigeon representation of a CameraUpdate.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformCameraUpdate {
    /**
     * The update data, as JSON. This should only be set from CameraUpdate.toJson, and the native
     * code must interpret it according to the internal implementation details of the CameraUpdate
     * class.
     */
    private @NonNull Object json;

    public @NonNull Object getJson() {
      return json;
    }

    public void setJson(@NonNull Object setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"json\" is null.");
      }
      this.json = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformCameraUpdate() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformCameraUpdate that = (PlatformCameraUpdate) o;
      return json.equals(that.json);
    }

    @Override
    public int hashCode() {
      return Objects.hash(json);
    }

    public static final class Builder {

      private @Nullable Object json;

      @CanIgnoreReturnValue
      public @NonNull Builder setJson(@NonNull Object setterArg) {
        this.json = setterArg;
        return this;
      }

      public @NonNull PlatformCameraUpdate build() {
        PlatformCameraUpdate pigeonReturn = new PlatformCameraUpdate();
        pigeonReturn.setJson(json);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(json);
      return toListResult;
    }

    static @NonNull PlatformCameraUpdate fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformCameraUpdate pigeonResult = new PlatformCameraUpdate();
      Object json = __pigeon_list.get(0);
      pigeonResult.setJson(json);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of the Circle class.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformCircle {
    private @NonNull Boolean consumeTapEvents;

    public @NonNull Boolean getConsumeTapEvents() {
      return consumeTapEvents;
    }

    public void setConsumeTapEvents(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"consumeTapEvents\" is null.");
      }
      this.consumeTapEvents = setterArg;
    }

    private @NonNull Long fillColor;

    public @NonNull Long getFillColor() {
      return fillColor;
    }

    public void setFillColor(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fillColor\" is null.");
      }
      this.fillColor = setterArg;
    }

    private @NonNull Long strokeColor;

    public @NonNull Long getStrokeColor() {
      return strokeColor;
    }

    public void setStrokeColor(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"strokeColor\" is null.");
      }
      this.strokeColor = setterArg;
    }

    private @NonNull Boolean visible;

    public @NonNull Boolean getVisible() {
      return visible;
    }

    public void setVisible(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"visible\" is null.");
      }
      this.visible = setterArg;
    }

    private @NonNull Long strokeWidth;

    public @NonNull Long getStrokeWidth() {
      return strokeWidth;
    }

    public void setStrokeWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"strokeWidth\" is null.");
      }
      this.strokeWidth = setterArg;
    }

    private @NonNull Double zIndex;

    public @NonNull Double getZIndex() {
      return zIndex;
    }

    public void setZIndex(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"zIndex\" is null.");
      }
      this.zIndex = setterArg;
    }

    private @NonNull PlatformLatLng center;

    public @NonNull PlatformLatLng getCenter() {
      return center;
    }

    public void setCenter(@NonNull PlatformLatLng setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"center\" is null.");
      }
      this.center = setterArg;
    }

    private @NonNull Double radius;

    public @NonNull Double getRadius() {
      return radius;
    }

    public void setRadius(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"radius\" is null.");
      }
      this.radius = setterArg;
    }

    private @NonNull String circleId;

    public @NonNull String getCircleId() {
      return circleId;
    }

    public void setCircleId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"circleId\" is null.");
      }
      this.circleId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformCircle() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformCircle that = (PlatformCircle) o;
      return consumeTapEvents.equals(that.consumeTapEvents)
          && fillColor.equals(that.fillColor)
          && strokeColor.equals(that.strokeColor)
          && visible.equals(that.visible)
          && strokeWidth.equals(that.strokeWidth)
          && zIndex.equals(that.zIndex)
          && center.equals(that.center)
          && radius.equals(that.radius)
          && circleId.equals(that.circleId);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          consumeTapEvents,
          fillColor,
          strokeColor,
          visible,
          strokeWidth,
          zIndex,
          center,
          radius,
          circleId);
    }

    public static final class Builder {

      private @Nullable Boolean consumeTapEvents;

      @CanIgnoreReturnValue
      public @NonNull Builder setConsumeTapEvents(@NonNull Boolean setterArg) {
        this.consumeTapEvents = setterArg;
        return this;
      }

      private @Nullable Long fillColor;

      @CanIgnoreReturnValue
      public @NonNull Builder setFillColor(@NonNull Long setterArg) {
        this.fillColor = setterArg;
        return this;
      }

      private @Nullable Long strokeColor;

      @CanIgnoreReturnValue
      public @NonNull Builder setStrokeColor(@NonNull Long setterArg) {
        this.strokeColor = setterArg;
        return this;
      }

      private @Nullable Boolean visible;

      @CanIgnoreReturnValue
      public @NonNull Builder setVisible(@NonNull Boolean setterArg) {
        this.visible = setterArg;
        return this;
      }

      private @Nullable Long strokeWidth;

      @CanIgnoreReturnValue
      public @NonNull Builder setStrokeWidth(@NonNull Long setterArg) {
        this.strokeWidth = setterArg;
        return this;
      }

      private @Nullable Double zIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setZIndex(@NonNull Double setterArg) {
        this.zIndex = setterArg;
        return this;
      }

      private @Nullable PlatformLatLng center;

      @CanIgnoreReturnValue
      public @NonNull Builder setCenter(@NonNull PlatformLatLng setterArg) {
        this.center = setterArg;
        return this;
      }

      private @Nullable Double radius;

      @CanIgnoreReturnValue
      public @NonNull Builder setRadius(@NonNull Double setterArg) {
        this.radius = setterArg;
        return this;
      }

      private @Nullable String circleId;

      @CanIgnoreReturnValue
      public @NonNull Builder setCircleId(@NonNull String setterArg) {
        this.circleId = setterArg;
        return this;
      }

      public @NonNull PlatformCircle build() {
        PlatformCircle pigeonReturn = new PlatformCircle();
        pigeonReturn.setConsumeTapEvents(consumeTapEvents);
        pigeonReturn.setFillColor(fillColor);
        pigeonReturn.setStrokeColor(strokeColor);
        pigeonReturn.setVisible(visible);
        pigeonReturn.setStrokeWidth(strokeWidth);
        pigeonReturn.setZIndex(zIndex);
        pigeonReturn.setCenter(center);
        pigeonReturn.setRadius(radius);
        pigeonReturn.setCircleId(circleId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(9);
      toListResult.add(consumeTapEvents);
      toListResult.add(fillColor);
      toListResult.add(strokeColor);
      toListResult.add(visible);
      toListResult.add(strokeWidth);
      toListResult.add(zIndex);
      toListResult.add(center);
      toListResult.add(radius);
      toListResult.add(circleId);
      return toListResult;
    }

    static @NonNull PlatformCircle fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformCircle pigeonResult = new PlatformCircle();
      Object consumeTapEvents = __pigeon_list.get(0);
      pigeonResult.setConsumeTapEvents((Boolean) consumeTapEvents);
      Object fillColor = __pigeon_list.get(1);
      pigeonResult.setFillColor(
          (fillColor == null)
              ? null
              : ((fillColor instanceof Integer) ? (Integer) fillColor : (Long) fillColor));
      Object strokeColor = __pigeon_list.get(2);
      pigeonResult.setStrokeColor(
          (strokeColor == null)
              ? null
              : ((strokeColor instanceof Integer) ? (Integer) strokeColor : (Long) strokeColor));
      Object visible = __pigeon_list.get(3);
      pigeonResult.setVisible((Boolean) visible);
      Object strokeWidth = __pigeon_list.get(4);
      pigeonResult.setStrokeWidth(
          (strokeWidth == null)
              ? null
              : ((strokeWidth instanceof Integer) ? (Integer) strokeWidth : (Long) strokeWidth));
      Object zIndex = __pigeon_list.get(5);
      pigeonResult.setZIndex((Double) zIndex);
      Object center = __pigeon_list.get(6);
      pigeonResult.setCenter((PlatformLatLng) center);
      Object radius = __pigeon_list.get(7);
      pigeonResult.setRadius((Double) radius);
      Object circleId = __pigeon_list.get(8);
      pigeonResult.setCircleId((String) circleId);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of the Heatmap class.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformHeatmap {
    /**
     * The heatmap data, as JSON. This should only be set from Heatmap.toJson, and the native code
     * must interpret it according to the internal implementation details of that method.
     */
    private @NonNull Map<String, Object> json;

    public @NonNull Map<String, Object> getJson() {
      return json;
    }

    public void setJson(@NonNull Map<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"json\" is null.");
      }
      this.json = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformHeatmap() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformHeatmap that = (PlatformHeatmap) o;
      return json.equals(that.json);
    }

    @Override
    public int hashCode() {
      return Objects.hash(json);
    }

    public static final class Builder {

      private @Nullable Map<String, Object> json;

      @CanIgnoreReturnValue
      public @NonNull Builder setJson(@NonNull Map<String, Object> setterArg) {
        this.json = setterArg;
        return this;
      }

      public @NonNull PlatformHeatmap build() {
        PlatformHeatmap pigeonReturn = new PlatformHeatmap();
        pigeonReturn.setJson(json);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(json);
      return toListResult;
    }

    static @NonNull PlatformHeatmap fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformHeatmap pigeonResult = new PlatformHeatmap();
      Object json = __pigeon_list.get(0);
      pigeonResult.setJson((Map<String, Object>) json);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of the ClusterManager class.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformClusterManager {
    private @NonNull String identifier;

    public @NonNull String getIdentifier() {
      return identifier;
    }

    public void setIdentifier(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"identifier\" is null.");
      }
      this.identifier = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformClusterManager() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformClusterManager that = (PlatformClusterManager) o;
      return identifier.equals(that.identifier);
    }

    @Override
    public int hashCode() {
      return Objects.hash(identifier);
    }

    public static final class Builder {

      private @Nullable String identifier;

      @CanIgnoreReturnValue
      public @NonNull Builder setIdentifier(@NonNull String setterArg) {
        this.identifier = setterArg;
        return this;
      }

      public @NonNull PlatformClusterManager build() {
        PlatformClusterManager pigeonReturn = new PlatformClusterManager();
        pigeonReturn.setIdentifier(identifier);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(identifier);
      return toListResult;
    }

    static @NonNull PlatformClusterManager fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformClusterManager pigeonResult = new PlatformClusterManager();
      Object identifier = __pigeon_list.get(0);
      pigeonResult.setIdentifier((String) identifier);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of the Offset class.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformOffset {
    private @NonNull Double dx;

    public @NonNull Double getDx() {
      return dx;
    }

    public void setDx(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dx\" is null.");
      }
      this.dx = setterArg;
    }

    private @NonNull Double dy;

    public @NonNull Double getDy() {
      return dy;
    }

    public void setDy(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dy\" is null.");
      }
      this.dy = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformOffset() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformOffset that = (PlatformOffset) o;
      return dx.equals(that.dx) && dy.equals(that.dy);
    }

    @Override
    public int hashCode() {
      return Objects.hash(dx, dy);
    }

    public static final class Builder {

      private @Nullable Double dx;

      @CanIgnoreReturnValue
      public @NonNull Builder setDx(@NonNull Double setterArg) {
        this.dx = setterArg;
        return this;
      }

      private @Nullable Double dy;

      @CanIgnoreReturnValue
      public @NonNull Builder setDy(@NonNull Double setterArg) {
        this.dy = setterArg;
        return this;
      }

      public @NonNull PlatformOffset build() {
        PlatformOffset pigeonReturn = new PlatformOffset();
        pigeonReturn.setDx(dx);
        pigeonReturn.setDy(dy);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(dx);
      toListResult.add(dy);
      return toListResult;
    }

    static @NonNull PlatformOffset fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformOffset pigeonResult = new PlatformOffset();
      Object dx = __pigeon_list.get(0);
      pigeonResult.setDx((Double) dx);
      Object dy = __pigeon_list.get(1);
      pigeonResult.setDy((Double) dy);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of the InfoWindow class.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformInfoWindow {
    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String snippet;

    public @Nullable String getSnippet() {
      return snippet;
    }

    public void setSnippet(@Nullable String setterArg) {
      this.snippet = setterArg;
    }

    private @NonNull PlatformOffset anchor;

    public @NonNull PlatformOffset getAnchor() {
      return anchor;
    }

    public void setAnchor(@NonNull PlatformOffset setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"anchor\" is null.");
      }
      this.anchor = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformInfoWindow() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformInfoWindow that = (PlatformInfoWindow) o;
      return Objects.equals(title, that.title)
          && Objects.equals(snippet, that.snippet)
          && anchor.equals(that.anchor);
    }

    @Override
    public int hashCode() {
      return Objects.hash(title, snippet, anchor);
    }

    public static final class Builder {

      private @Nullable String title;

      @CanIgnoreReturnValue
      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String snippet;

      @CanIgnoreReturnValue
      public @NonNull Builder setSnippet(@Nullable String setterArg) {
        this.snippet = setterArg;
        return this;
      }

      private @Nullable PlatformOffset anchor;

      @CanIgnoreReturnValue
      public @NonNull Builder setAnchor(@NonNull PlatformOffset setterArg) {
        this.anchor = setterArg;
        return this;
      }

      public @NonNull PlatformInfoWindow build() {
        PlatformInfoWindow pigeonReturn = new PlatformInfoWindow();
        pigeonReturn.setTitle(title);
        pigeonReturn.setSnippet(snippet);
        pigeonReturn.setAnchor(anchor);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(title);
      toListResult.add(snippet);
      toListResult.add(anchor);
      return toListResult;
    }

    static @NonNull PlatformInfoWindow fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformInfoWindow pigeonResult = new PlatformInfoWindow();
      Object title = __pigeon_list.get(0);
      pigeonResult.setTitle((String) title);
      Object snippet = __pigeon_list.get(1);
      pigeonResult.setSnippet((String) snippet);
      Object anchor = __pigeon_list.get(2);
      pigeonResult.setAnchor((PlatformOffset) anchor);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of the Marker class.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformMarker {
    private @NonNull Double alpha;

    public @NonNull Double getAlpha() {
      return alpha;
    }

    public void setAlpha(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"alpha\" is null.");
      }
      this.alpha = setterArg;
    }

    private @NonNull PlatformOffset anchor;

    public @NonNull PlatformOffset getAnchor() {
      return anchor;
    }

    public void setAnchor(@NonNull PlatformOffset setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"anchor\" is null.");
      }
      this.anchor = setterArg;
    }

    private @NonNull Boolean consumeTapEvents;

    public @NonNull Boolean getConsumeTapEvents() {
      return consumeTapEvents;
    }

    public void setConsumeTapEvents(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"consumeTapEvents\" is null.");
      }
      this.consumeTapEvents = setterArg;
    }

    private @NonNull Boolean draggable;

    public @NonNull Boolean getDraggable() {
      return draggable;
    }

    public void setDraggable(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"draggable\" is null.");
      }
      this.draggable = setterArg;
    }

    private @NonNull Boolean flat;

    public @NonNull Boolean getFlat() {
      return flat;
    }

    public void setFlat(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"flat\" is null.");
      }
      this.flat = setterArg;
    }

    /** The icon as JSON data. */
    private @NonNull Object icon;

    public @NonNull Object getIcon() {
      return icon;
    }

    public void setIcon(@NonNull Object setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"icon\" is null.");
      }
      this.icon = setterArg;
    }

    private @NonNull PlatformInfoWindow infoWindow;

    public @NonNull PlatformInfoWindow getInfoWindow() {
      return infoWindow;
    }

    public void setInfoWindow(@NonNull PlatformInfoWindow setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"infoWindow\" is null.");
      }
      this.infoWindow = setterArg;
    }

    private @NonNull PlatformLatLng position;

    public @NonNull PlatformLatLng getPosition() {
      return position;
    }

    public void setPosition(@NonNull PlatformLatLng setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"position\" is null.");
      }
      this.position = setterArg;
    }

    private @NonNull Double rotation;

    public @NonNull Double getRotation() {
      return rotation;
    }

    public void setRotation(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"rotation\" is null.");
      }
      this.rotation = setterArg;
    }

    private @NonNull Boolean visible;

    public @NonNull Boolean getVisible() {
      return visible;
    }

    public void setVisible(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"visible\" is null.");
      }
      this.visible = setterArg;
    }

    private @NonNull Double zIndex;

    public @NonNull Double getZIndex() {
      return zIndex;
    }

    public void setZIndex(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"zIndex\" is null.");
      }
      this.zIndex = setterArg;
    }

    private @NonNull String markerId;

    public @NonNull String getMarkerId() {
      return markerId;
    }

    public void setMarkerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"markerId\" is null.");
      }
      this.markerId = setterArg;
    }

    private @Nullable String clusterManagerId;

    public @Nullable String getClusterManagerId() {
      return clusterManagerId;
    }

    public void setClusterManagerId(@Nullable String setterArg) {
      this.clusterManagerId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformMarker() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformMarker that = (PlatformMarker) o;
      return alpha.equals(that.alpha)
          && anchor.equals(that.anchor)
          && consumeTapEvents.equals(that.consumeTapEvents)
          && draggable.equals(that.draggable)
          && flat.equals(that.flat)
          && icon.equals(that.icon)
          && infoWindow.equals(that.infoWindow)
          && position.equals(that.position)
          && rotation.equals(that.rotation)
          && visible.equals(that.visible)
          && zIndex.equals(that.zIndex)
          && markerId.equals(that.markerId)
          && Objects.equals(clusterManagerId, that.clusterManagerId);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          alpha,
          anchor,
          consumeTapEvents,
          draggable,
          flat,
          icon,
          infoWindow,
          position,
          rotation,
          visible,
          zIndex,
          markerId,
          clusterManagerId);
    }

    public static final class Builder {

      private @Nullable Double alpha;

      @CanIgnoreReturnValue
      public @NonNull Builder setAlpha(@NonNull Double setterArg) {
        this.alpha = setterArg;
        return this;
      }

      private @Nullable PlatformOffset anchor;

      @CanIgnoreReturnValue
      public @NonNull Builder setAnchor(@NonNull PlatformOffset setterArg) {
        this.anchor = setterArg;
        return this;
      }

      private @Nullable Boolean consumeTapEvents;

      @CanIgnoreReturnValue
      public @NonNull Builder setConsumeTapEvents(@NonNull Boolean setterArg) {
        this.consumeTapEvents = setterArg;
        return this;
      }

      private @Nullable Boolean draggable;

      @CanIgnoreReturnValue
      public @NonNull Builder setDraggable(@NonNull Boolean setterArg) {
        this.draggable = setterArg;
        return this;
      }

      private @Nullable Boolean flat;

      @CanIgnoreReturnValue
      public @NonNull Builder setFlat(@NonNull Boolean setterArg) {
        this.flat = setterArg;
        return this;
      }

      private @Nullable Object icon;

      @CanIgnoreReturnValue
      public @NonNull Builder setIcon(@NonNull Object setterArg) {
        this.icon = setterArg;
        return this;
      }

      private @Nullable PlatformInfoWindow infoWindow;

      @CanIgnoreReturnValue
      public @NonNull Builder setInfoWindow(@NonNull PlatformInfoWindow setterArg) {
        this.infoWindow = setterArg;
        return this;
      }

      private @Nullable PlatformLatLng position;

      @CanIgnoreReturnValue
      public @NonNull Builder setPosition(@NonNull PlatformLatLng setterArg) {
        this.position = setterArg;
        return this;
      }

      private @Nullable Double rotation;

      @CanIgnoreReturnValue
      public @NonNull Builder setRotation(@NonNull Double setterArg) {
        this.rotation = setterArg;
        return this;
      }

      private @Nullable Boolean visible;

      @CanIgnoreReturnValue
      public @NonNull Builder setVisible(@NonNull Boolean setterArg) {
        this.visible = setterArg;
        return this;
      }

      private @Nullable Double zIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setZIndex(@NonNull Double setterArg) {
        this.zIndex = setterArg;
        return this;
      }

      private @Nullable String markerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setMarkerId(@NonNull String setterArg) {
        this.markerId = setterArg;
        return this;
      }

      private @Nullable String clusterManagerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setClusterManagerId(@Nullable String setterArg) {
        this.clusterManagerId = setterArg;
        return this;
      }

      public @NonNull PlatformMarker build() {
        PlatformMarker pigeonReturn = new PlatformMarker();
        pigeonReturn.setAlpha(alpha);
        pigeonReturn.setAnchor(anchor);
        pigeonReturn.setConsumeTapEvents(consumeTapEvents);
        pigeonReturn.setDraggable(draggable);
        pigeonReturn.setFlat(flat);
        pigeonReturn.setIcon(icon);
        pigeonReturn.setInfoWindow(infoWindow);
        pigeonReturn.setPosition(position);
        pigeonReturn.setRotation(rotation);
        pigeonReturn.setVisible(visible);
        pigeonReturn.setZIndex(zIndex);
        pigeonReturn.setMarkerId(markerId);
        pigeonReturn.setClusterManagerId(clusterManagerId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(13);
      toListResult.add(alpha);
      toListResult.add(anchor);
      toListResult.add(consumeTapEvents);
      toListResult.add(draggable);
      toListResult.add(flat);
      toListResult.add(icon);
      toListResult.add(infoWindow);
      toListResult.add(position);
      toListResult.add(rotation);
      toListResult.add(visible);
      toListResult.add(zIndex);
      toListResult.add(markerId);
      toListResult.add(clusterManagerId);
      return toListResult;
    }

    static @NonNull PlatformMarker fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformMarker pigeonResult = new PlatformMarker();
      Object alpha = __pigeon_list.get(0);
      pigeonResult.setAlpha((Double) alpha);
      Object anchor = __pigeon_list.get(1);
      pigeonResult.setAnchor((PlatformOffset) anchor);
      Object consumeTapEvents = __pigeon_list.get(2);
      pigeonResult.setConsumeTapEvents((Boolean) consumeTapEvents);
      Object draggable = __pigeon_list.get(3);
      pigeonResult.setDraggable((Boolean) draggable);
      Object flat = __pigeon_list.get(4);
      pigeonResult.setFlat((Boolean) flat);
      Object icon = __pigeon_list.get(5);
      pigeonResult.setIcon(icon);
      Object infoWindow = __pigeon_list.get(6);
      pigeonResult.setInfoWindow((PlatformInfoWindow) infoWindow);
      Object position = __pigeon_list.get(7);
      pigeonResult.setPosition((PlatformLatLng) position);
      Object rotation = __pigeon_list.get(8);
      pigeonResult.setRotation((Double) rotation);
      Object visible = __pigeon_list.get(9);
      pigeonResult.setVisible((Boolean) visible);
      Object zIndex = __pigeon_list.get(10);
      pigeonResult.setZIndex((Double) zIndex);
      Object markerId = __pigeon_list.get(11);
      pigeonResult.setMarkerId((String) markerId);
      Object clusterManagerId = __pigeon_list.get(12);
      pigeonResult.setClusterManagerId((String) clusterManagerId);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of the Polygon class.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformPolygon {
    private @NonNull String polygonId;

    public @NonNull String getPolygonId() {
      return polygonId;
    }

    public void setPolygonId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"polygonId\" is null.");
      }
      this.polygonId = setterArg;
    }

    private @NonNull Boolean consumesTapEvents;

    public @NonNull Boolean getConsumesTapEvents() {
      return consumesTapEvents;
    }

    public void setConsumesTapEvents(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"consumesTapEvents\" is null.");
      }
      this.consumesTapEvents = setterArg;
    }

    private @NonNull Long fillColor;

    public @NonNull Long getFillColor() {
      return fillColor;
    }

    public void setFillColor(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fillColor\" is null.");
      }
      this.fillColor = setterArg;
    }

    private @NonNull Boolean geodesic;

    public @NonNull Boolean getGeodesic() {
      return geodesic;
    }

    public void setGeodesic(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"geodesic\" is null.");
      }
      this.geodesic = setterArg;
    }

    private @NonNull List<PlatformLatLng> points;

    public @NonNull List<PlatformLatLng> getPoints() {
      return points;
    }

    public void setPoints(@NonNull List<PlatformLatLng> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"points\" is null.");
      }
      this.points = setterArg;
    }

    private @NonNull List<List<PlatformLatLng>> holes;

    public @NonNull List<List<PlatformLatLng>> getHoles() {
      return holes;
    }

    public void setHoles(@NonNull List<List<PlatformLatLng>> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"holes\" is null.");
      }
      this.holes = setterArg;
    }

    private @NonNull Boolean visible;

    public @NonNull Boolean getVisible() {
      return visible;
    }

    public void setVisible(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"visible\" is null.");
      }
      this.visible = setterArg;
    }

    private @NonNull Long strokeColor;

    public @NonNull Long getStrokeColor() {
      return strokeColor;
    }

    public void setStrokeColor(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"strokeColor\" is null.");
      }
      this.strokeColor = setterArg;
    }

    private @NonNull Long strokeWidth;

    public @NonNull Long getStrokeWidth() {
      return strokeWidth;
    }

    public void setStrokeWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"strokeWidth\" is null.");
      }
      this.strokeWidth = setterArg;
    }

    private @NonNull Long zIndex;

    public @NonNull Long getZIndex() {
      return zIndex;
    }

    public void setZIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"zIndex\" is null.");
      }
      this.zIndex = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformPolygon() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformPolygon that = (PlatformPolygon) o;
      return polygonId.equals(that.polygonId)
          && consumesTapEvents.equals(that.consumesTapEvents)
          && fillColor.equals(that.fillColor)
          && geodesic.equals(that.geodesic)
          && points.equals(that.points)
          && holes.equals(that.holes)
          && visible.equals(that.visible)
          && strokeColor.equals(that.strokeColor)
          && strokeWidth.equals(that.strokeWidth)
          && zIndex.equals(that.zIndex);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          polygonId,
          consumesTapEvents,
          fillColor,
          geodesic,
          points,
          holes,
          visible,
          strokeColor,
          strokeWidth,
          zIndex);
    }

    public static final class Builder {

      private @Nullable String polygonId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPolygonId(@NonNull String setterArg) {
        this.polygonId = setterArg;
        return this;
      }

      private @Nullable Boolean consumesTapEvents;

      @CanIgnoreReturnValue
      public @NonNull Builder setConsumesTapEvents(@NonNull Boolean setterArg) {
        this.consumesTapEvents = setterArg;
        return this;
      }

      private @Nullable Long fillColor;

      @CanIgnoreReturnValue
      public @NonNull Builder setFillColor(@NonNull Long setterArg) {
        this.fillColor = setterArg;
        return this;
      }

      private @Nullable Boolean geodesic;

      @CanIgnoreReturnValue
      public @NonNull Builder setGeodesic(@NonNull Boolean setterArg) {
        this.geodesic = setterArg;
        return this;
      }

      private @Nullable List<PlatformLatLng> points;

      @CanIgnoreReturnValue
      public @NonNull Builder setPoints(@NonNull List<PlatformLatLng> setterArg) {
        this.points = setterArg;
        return this;
      }

      private @Nullable List<List<PlatformLatLng>> holes;

      @CanIgnoreReturnValue
      public @NonNull Builder setHoles(@NonNull List<List<PlatformLatLng>> setterArg) {
        this.holes = setterArg;
        return this;
      }

      private @Nullable Boolean visible;

      @CanIgnoreReturnValue
      public @NonNull Builder setVisible(@NonNull Boolean setterArg) {
        this.visible = setterArg;
        return this;
      }

      private @Nullable Long strokeColor;

      @CanIgnoreReturnValue
      public @NonNull Builder setStrokeColor(@NonNull Long setterArg) {
        this.strokeColor = setterArg;
        return this;
      }

      private @Nullable Long strokeWidth;

      @CanIgnoreReturnValue
      public @NonNull Builder setStrokeWidth(@NonNull Long setterArg) {
        this.strokeWidth = setterArg;
        return this;
      }

      private @Nullable Long zIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setZIndex(@NonNull Long setterArg) {
        this.zIndex = setterArg;
        return this;
      }

      public @NonNull PlatformPolygon build() {
        PlatformPolygon pigeonReturn = new PlatformPolygon();
        pigeonReturn.setPolygonId(polygonId);
        pigeonReturn.setConsumesTapEvents(consumesTapEvents);
        pigeonReturn.setFillColor(fillColor);
        pigeonReturn.setGeodesic(geodesic);
        pigeonReturn.setPoints(points);
        pigeonReturn.setHoles(holes);
        pigeonReturn.setVisible(visible);
        pigeonReturn.setStrokeColor(strokeColor);
        pigeonReturn.setStrokeWidth(strokeWidth);
        pigeonReturn.setZIndex(zIndex);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(10);
      toListResult.add(polygonId);
      toListResult.add(consumesTapEvents);
      toListResult.add(fillColor);
      toListResult.add(geodesic);
      toListResult.add(points);
      toListResult.add(holes);
      toListResult.add(visible);
      toListResult.add(strokeColor);
      toListResult.add(strokeWidth);
      toListResult.add(zIndex);
      return toListResult;
    }

    static @NonNull PlatformPolygon fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformPolygon pigeonResult = new PlatformPolygon();
      Object polygonId = __pigeon_list.get(0);
      pigeonResult.setPolygonId((String) polygonId);
      Object consumesTapEvents = __pigeon_list.get(1);
      pigeonResult.setConsumesTapEvents((Boolean) consumesTapEvents);
      Object fillColor = __pigeon_list.get(2);
      pigeonResult.setFillColor(
          (fillColor == null)
              ? null
              : ((fillColor instanceof Integer) ? (Integer) fillColor : (Long) fillColor));
      Object geodesic = __pigeon_list.get(3);
      pigeonResult.setGeodesic((Boolean) geodesic);
      Object points = __pigeon_list.get(4);
      pigeonResult.setPoints((List<PlatformLatLng>) points);
      Object holes = __pigeon_list.get(5);
      pigeonResult.setHoles((List<List<PlatformLatLng>>) holes);
      Object visible = __pigeon_list.get(6);
      pigeonResult.setVisible((Boolean) visible);
      Object strokeColor = __pigeon_list.get(7);
      pigeonResult.setStrokeColor(
          (strokeColor == null)
              ? null
              : ((strokeColor instanceof Integer) ? (Integer) strokeColor : (Long) strokeColor));
      Object strokeWidth = __pigeon_list.get(8);
      pigeonResult.setStrokeWidth(
          (strokeWidth == null)
              ? null
              : ((strokeWidth instanceof Integer) ? (Integer) strokeWidth : (Long) strokeWidth));
      Object zIndex = __pigeon_list.get(9);
      pigeonResult.setZIndex(
          (zIndex == null)
              ? null
              : ((zIndex instanceof Integer) ? (Integer) zIndex : (Long) zIndex));
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of the Polyline class.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformPolyline {
    private @NonNull String polylineId;

    public @NonNull String getPolylineId() {
      return polylineId;
    }

    public void setPolylineId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"polylineId\" is null.");
      }
      this.polylineId = setterArg;
    }

    private @NonNull Boolean consumesTapEvents;

    public @NonNull Boolean getConsumesTapEvents() {
      return consumesTapEvents;
    }

    public void setConsumesTapEvents(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"consumesTapEvents\" is null.");
      }
      this.consumesTapEvents = setterArg;
    }

    private @NonNull Long color;

    public @NonNull Long getColor() {
      return color;
    }

    public void setColor(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"color\" is null.");
      }
      this.color = setterArg;
    }

    private @NonNull Boolean geodesic;

    public @NonNull Boolean getGeodesic() {
      return geodesic;
    }

    public void setGeodesic(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"geodesic\" is null.");
      }
      this.geodesic = setterArg;
    }

    /**
     * The joint type as an integer. This must be a value corresponding to one of the values defined
     * in the platform interface package's JointType enum. The integer values specified in this enum
     * must match those used by the native SDK.
     */
    private @NonNull PlatformJointType jointType;

    public @NonNull PlatformJointType getJointType() {
      return jointType;
    }

    public void setJointType(@NonNull PlatformJointType setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"jointType\" is null.");
      }
      this.jointType = setterArg;
    }

    /**
     * The pattern data, as JSON. Each element in this list should be set only from
     * PatternItem.toJson, and the native code must interpret it according to the internal
     * implementation details of that method.
     */
    private @NonNull List<Object> patterns;

    public @NonNull List<Object> getPatterns() {
      return patterns;
    }

    public void setPatterns(@NonNull List<Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"patterns\" is null.");
      }
      this.patterns = setterArg;
    }

    private @NonNull List<PlatformLatLng> points;

    public @NonNull List<PlatformLatLng> getPoints() {
      return points;
    }

    public void setPoints(@NonNull List<PlatformLatLng> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"points\" is null.");
      }
      this.points = setterArg;
    }

    /**
     * The start and end cap data, as JSON. These should be set only from Cap.toJson, and the native
     * code must interpret it according to the internal implementation details of that method.
     */
    private @NonNull Object startCap;

    public @NonNull Object getStartCap() {
      return startCap;
    }

    public void setStartCap(@NonNull Object setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"startCap\" is null.");
      }
      this.startCap = setterArg;
    }

    private @NonNull Object endCap;

    public @NonNull Object getEndCap() {
      return endCap;
    }

    public void setEndCap(@NonNull Object setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"endCap\" is null.");
      }
      this.endCap = setterArg;
    }

    private @NonNull Boolean visible;

    public @NonNull Boolean getVisible() {
      return visible;
    }

    public void setVisible(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"visible\" is null.");
      }
      this.visible = setterArg;
    }

    private @NonNull Long width;

    public @NonNull Long getWidth() {
      return width;
    }

    public void setWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Long zIndex;

    public @NonNull Long getZIndex() {
      return zIndex;
    }

    public void setZIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"zIndex\" is null.");
      }
      this.zIndex = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformPolyline() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformPolyline that = (PlatformPolyline) o;
      return polylineId.equals(that.polylineId)
          && consumesTapEvents.equals(that.consumesTapEvents)
          && color.equals(that.color)
          && geodesic.equals(that.geodesic)
          && jointType.equals(that.jointType)
          && patterns.equals(that.patterns)
          && points.equals(that.points)
          && startCap.equals(that.startCap)
          && endCap.equals(that.endCap)
          && visible.equals(that.visible)
          && width.equals(that.width)
          && zIndex.equals(that.zIndex);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          polylineId,
          consumesTapEvents,
          color,
          geodesic,
          jointType,
          patterns,
          points,
          startCap,
          endCap,
          visible,
          width,
          zIndex);
    }

    public static final class Builder {

      private @Nullable String polylineId;

      @CanIgnoreReturnValue
      public @NonNull Builder setPolylineId(@NonNull String setterArg) {
        this.polylineId = setterArg;
        return this;
      }

      private @Nullable Boolean consumesTapEvents;

      @CanIgnoreReturnValue
      public @NonNull Builder setConsumesTapEvents(@NonNull Boolean setterArg) {
        this.consumesTapEvents = setterArg;
        return this;
      }

      private @Nullable Long color;

      @CanIgnoreReturnValue
      public @NonNull Builder setColor(@NonNull Long setterArg) {
        this.color = setterArg;
        return this;
      }

      private @Nullable Boolean geodesic;

      @CanIgnoreReturnValue
      public @NonNull Builder setGeodesic(@NonNull Boolean setterArg) {
        this.geodesic = setterArg;
        return this;
      }

      private @Nullable PlatformJointType jointType;

      @CanIgnoreReturnValue
      public @NonNull Builder setJointType(@NonNull PlatformJointType setterArg) {
        this.jointType = setterArg;
        return this;
      }

      private @Nullable List<Object> patterns;

      @CanIgnoreReturnValue
      public @NonNull Builder setPatterns(@NonNull List<Object> setterArg) {
        this.patterns = setterArg;
        return this;
      }

      private @Nullable List<PlatformLatLng> points;

      @CanIgnoreReturnValue
      public @NonNull Builder setPoints(@NonNull List<PlatformLatLng> setterArg) {
        this.points = setterArg;
        return this;
      }

      private @Nullable Object startCap;

      @CanIgnoreReturnValue
      public @NonNull Builder setStartCap(@NonNull Object setterArg) {
        this.startCap = setterArg;
        return this;
      }

      private @Nullable Object endCap;

      @CanIgnoreReturnValue
      public @NonNull Builder setEndCap(@NonNull Object setterArg) {
        this.endCap = setterArg;
        return this;
      }

      private @Nullable Boolean visible;

      @CanIgnoreReturnValue
      public @NonNull Builder setVisible(@NonNull Boolean setterArg) {
        this.visible = setterArg;
        return this;
      }

      private @Nullable Long width;

      @CanIgnoreReturnValue
      public @NonNull Builder setWidth(@NonNull Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long zIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setZIndex(@NonNull Long setterArg) {
        this.zIndex = setterArg;
        return this;
      }

      public @NonNull PlatformPolyline build() {
        PlatformPolyline pigeonReturn = new PlatformPolyline();
        pigeonReturn.setPolylineId(polylineId);
        pigeonReturn.setConsumesTapEvents(consumesTapEvents);
        pigeonReturn.setColor(color);
        pigeonReturn.setGeodesic(geodesic);
        pigeonReturn.setJointType(jointType);
        pigeonReturn.setPatterns(patterns);
        pigeonReturn.setPoints(points);
        pigeonReturn.setStartCap(startCap);
        pigeonReturn.setEndCap(endCap);
        pigeonReturn.setVisible(visible);
        pigeonReturn.setWidth(width);
        pigeonReturn.setZIndex(zIndex);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(12);
      toListResult.add(polylineId);
      toListResult.add(consumesTapEvents);
      toListResult.add(color);
      toListResult.add(geodesic);
      toListResult.add(jointType);
      toListResult.add(patterns);
      toListResult.add(points);
      toListResult.add(startCap);
      toListResult.add(endCap);
      toListResult.add(visible);
      toListResult.add(width);
      toListResult.add(zIndex);
      return toListResult;
    }

    static @NonNull PlatformPolyline fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformPolyline pigeonResult = new PlatformPolyline();
      Object polylineId = __pigeon_list.get(0);
      pigeonResult.setPolylineId((String) polylineId);
      Object consumesTapEvents = __pigeon_list.get(1);
      pigeonResult.setConsumesTapEvents((Boolean) consumesTapEvents);
      Object color = __pigeon_list.get(2);
      pigeonResult.setColor(
          (color == null) ? null : ((color instanceof Integer) ? (Integer) color : (Long) color));
      Object geodesic = __pigeon_list.get(3);
      pigeonResult.setGeodesic((Boolean) geodesic);
      Object jointType = __pigeon_list.get(4);
      pigeonResult.setJointType((PlatformJointType) jointType);
      Object patterns = __pigeon_list.get(5);
      pigeonResult.setPatterns((List<Object>) patterns);
      Object points = __pigeon_list.get(6);
      pigeonResult.setPoints((List<PlatformLatLng>) points);
      Object startCap = __pigeon_list.get(7);
      pigeonResult.setStartCap(startCap);
      Object endCap = __pigeon_list.get(8);
      pigeonResult.setEndCap(endCap);
      Object visible = __pigeon_list.get(9);
      pigeonResult.setVisible((Boolean) visible);
      Object width = __pigeon_list.get(10);
      pigeonResult.setWidth(
          (width == null) ? null : ((width instanceof Integer) ? (Integer) width : (Long) width));
      Object zIndex = __pigeon_list.get(11);
      pigeonResult.setZIndex(
          (zIndex == null)
              ? null
              : ((zIndex instanceof Integer) ? (Integer) zIndex : (Long) zIndex));
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of the Tile class.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformTile {
    private @NonNull Long width;

    public @NonNull Long getWidth() {
      return width;
    }

    public void setWidth(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"width\" is null.");
      }
      this.width = setterArg;
    }

    private @NonNull Long height;

    public @NonNull Long getHeight() {
      return height;
    }

    public void setHeight(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"height\" is null.");
      }
      this.height = setterArg;
    }

    private @Nullable byte[] data;

    public @Nullable byte[] getData() {
      return data;
    }

    public void setData(@Nullable byte[] setterArg) {
      this.data = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformTile() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformTile that = (PlatformTile) o;
      return width.equals(that.width)
          && height.equals(that.height)
          && Arrays.equals(data, that.data);
    }

    @Override
    public int hashCode() {
      int __pigeon_result = Objects.hash(width, height);
      __pigeon_result = 31 * __pigeon_result + Arrays.hashCode(data);
      return __pigeon_result;
    }

    public static final class Builder {

      private @Nullable Long width;

      @CanIgnoreReturnValue
      public @NonNull Builder setWidth(@NonNull Long setterArg) {
        this.width = setterArg;
        return this;
      }

      private @Nullable Long height;

      @CanIgnoreReturnValue
      public @NonNull Builder setHeight(@NonNull Long setterArg) {
        this.height = setterArg;
        return this;
      }

      private @Nullable byte[] data;

      @CanIgnoreReturnValue
      public @NonNull Builder setData(@Nullable byte[] setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull PlatformTile build() {
        PlatformTile pigeonReturn = new PlatformTile();
        pigeonReturn.setWidth(width);
        pigeonReturn.setHeight(height);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(width);
      toListResult.add(height);
      toListResult.add(data);
      return toListResult;
    }

    static @NonNull PlatformTile fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformTile pigeonResult = new PlatformTile();
      Object width = __pigeon_list.get(0);
      pigeonResult.setWidth(
          (width == null) ? null : ((width instanceof Integer) ? (Integer) width : (Long) width));
      Object height = __pigeon_list.get(1);
      pigeonResult.setHeight(
          (height == null)
              ? null
              : ((height instanceof Integer) ? (Integer) height : (Long) height));
      Object data = __pigeon_list.get(2);
      pigeonResult.setData((byte[]) data);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of the TileOverlay class.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformTileOverlay {
    private @NonNull String tileOverlayId;

    public @NonNull String getTileOverlayId() {
      return tileOverlayId;
    }

    public void setTileOverlayId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"tileOverlayId\" is null.");
      }
      this.tileOverlayId = setterArg;
    }

    private @NonNull Boolean fadeIn;

    public @NonNull Boolean getFadeIn() {
      return fadeIn;
    }

    public void setFadeIn(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fadeIn\" is null.");
      }
      this.fadeIn = setterArg;
    }

    private @NonNull Double transparency;

    public @NonNull Double getTransparency() {
      return transparency;
    }

    public void setTransparency(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"transparency\" is null.");
      }
      this.transparency = setterArg;
    }

    private @NonNull Long zIndex;

    public @NonNull Long getZIndex() {
      return zIndex;
    }

    public void setZIndex(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"zIndex\" is null.");
      }
      this.zIndex = setterArg;
    }

    private @NonNull Boolean visible;

    public @NonNull Boolean getVisible() {
      return visible;
    }

    public void setVisible(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"visible\" is null.");
      }
      this.visible = setterArg;
    }

    private @NonNull Long tileSize;

    public @NonNull Long getTileSize() {
      return tileSize;
    }

    public void setTileSize(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"tileSize\" is null.");
      }
      this.tileSize = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformTileOverlay() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformTileOverlay that = (PlatformTileOverlay) o;
      return tileOverlayId.equals(that.tileOverlayId)
          && fadeIn.equals(that.fadeIn)
          && transparency.equals(that.transparency)
          && zIndex.equals(that.zIndex)
          && visible.equals(that.visible)
          && tileSize.equals(that.tileSize);
    }

    @Override
    public int hashCode() {
      return Objects.hash(tileOverlayId, fadeIn, transparency, zIndex, visible, tileSize);
    }

    public static final class Builder {

      private @Nullable String tileOverlayId;

      @CanIgnoreReturnValue
      public @NonNull Builder setTileOverlayId(@NonNull String setterArg) {
        this.tileOverlayId = setterArg;
        return this;
      }

      private @Nullable Boolean fadeIn;

      @CanIgnoreReturnValue
      public @NonNull Builder setFadeIn(@NonNull Boolean setterArg) {
        this.fadeIn = setterArg;
        return this;
      }

      private @Nullable Double transparency;

      @CanIgnoreReturnValue
      public @NonNull Builder setTransparency(@NonNull Double setterArg) {
        this.transparency = setterArg;
        return this;
      }

      private @Nullable Long zIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setZIndex(@NonNull Long setterArg) {
        this.zIndex = setterArg;
        return this;
      }

      private @Nullable Boolean visible;

      @CanIgnoreReturnValue
      public @NonNull Builder setVisible(@NonNull Boolean setterArg) {
        this.visible = setterArg;
        return this;
      }

      private @Nullable Long tileSize;

      @CanIgnoreReturnValue
      public @NonNull Builder setTileSize(@NonNull Long setterArg) {
        this.tileSize = setterArg;
        return this;
      }

      public @NonNull PlatformTileOverlay build() {
        PlatformTileOverlay pigeonReturn = new PlatformTileOverlay();
        pigeonReturn.setTileOverlayId(tileOverlayId);
        pigeonReturn.setFadeIn(fadeIn);
        pigeonReturn.setTransparency(transparency);
        pigeonReturn.setZIndex(zIndex);
        pigeonReturn.setVisible(visible);
        pigeonReturn.setTileSize(tileSize);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(tileOverlayId);
      toListResult.add(fadeIn);
      toListResult.add(transparency);
      toListResult.add(zIndex);
      toListResult.add(visible);
      toListResult.add(tileSize);
      return toListResult;
    }

    static @NonNull PlatformTileOverlay fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformTileOverlay pigeonResult = new PlatformTileOverlay();
      Object tileOverlayId = __pigeon_list.get(0);
      pigeonResult.setTileOverlayId((String) tileOverlayId);
      Object fadeIn = __pigeon_list.get(1);
      pigeonResult.setFadeIn((Boolean) fadeIn);
      Object transparency = __pigeon_list.get(2);
      pigeonResult.setTransparency((Double) transparency);
      Object zIndex = __pigeon_list.get(3);
      pigeonResult.setZIndex(
          (zIndex == null)
              ? null
              : ((zIndex instanceof Integer) ? (Integer) zIndex : (Long) zIndex));
      Object visible = __pigeon_list.get(4);
      pigeonResult.setVisible((Boolean) visible);
      Object tileSize = __pigeon_list.get(5);
      pigeonResult.setTileSize(
          (tileSize == null)
              ? null
              : ((tileSize instanceof Integer) ? (Integer) tileSize : (Long) tileSize));
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of Flutter's EdgeInsets.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformEdgeInsets {
    private @NonNull Double top;

    public @NonNull Double getTop() {
      return top;
    }

    public void setTop(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"top\" is null.");
      }
      this.top = setterArg;
    }

    private @NonNull Double bottom;

    public @NonNull Double getBottom() {
      return bottom;
    }

    public void setBottom(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bottom\" is null.");
      }
      this.bottom = setterArg;
    }

    private @NonNull Double left;

    public @NonNull Double getLeft() {
      return left;
    }

    public void setLeft(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"left\" is null.");
      }
      this.left = setterArg;
    }

    private @NonNull Double right;

    public @NonNull Double getRight() {
      return right;
    }

    public void setRight(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"right\" is null.");
      }
      this.right = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformEdgeInsets() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformEdgeInsets that = (PlatformEdgeInsets) o;
      return top.equals(that.top)
          && bottom.equals(that.bottom)
          && left.equals(that.left)
          && right.equals(that.right);
    }

    @Override
    public int hashCode() {
      return Objects.hash(top, bottom, left, right);
    }

    public static final class Builder {

      private @Nullable Double top;

      @CanIgnoreReturnValue
      public @NonNull Builder setTop(@NonNull Double setterArg) {
        this.top = setterArg;
        return this;
      }

      private @Nullable Double bottom;

      @CanIgnoreReturnValue
      public @NonNull Builder setBottom(@NonNull Double setterArg) {
        this.bottom = setterArg;
        return this;
      }

      private @Nullable Double left;

      @CanIgnoreReturnValue
      public @NonNull Builder setLeft(@NonNull Double setterArg) {
        this.left = setterArg;
        return this;
      }

      private @Nullable Double right;

      @CanIgnoreReturnValue
      public @NonNull Builder setRight(@NonNull Double setterArg) {
        this.right = setterArg;
        return this;
      }

      public @NonNull PlatformEdgeInsets build() {
        PlatformEdgeInsets pigeonReturn = new PlatformEdgeInsets();
        pigeonReturn.setTop(top);
        pigeonReturn.setBottom(bottom);
        pigeonReturn.setLeft(left);
        pigeonReturn.setRight(right);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(top);
      toListResult.add(bottom);
      toListResult.add(left);
      toListResult.add(right);
      return toListResult;
    }

    static @NonNull PlatformEdgeInsets fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformEdgeInsets pigeonResult = new PlatformEdgeInsets();
      Object top = __pigeon_list.get(0);
      pigeonResult.setTop((Double) top);
      Object bottom = __pigeon_list.get(1);
      pigeonResult.setBottom((Double) bottom);
      Object left = __pigeon_list.get(2);
      pigeonResult.setLeft((Double) left);
      Object right = __pigeon_list.get(3);
      pigeonResult.setRight((Double) right);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of LatLng.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformLatLng {
    private @NonNull Double latitude;

    public @NonNull Double getLatitude() {
      return latitude;
    }

    public void setLatitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"latitude\" is null.");
      }
      this.latitude = setterArg;
    }

    private @NonNull Double longitude;

    public @NonNull Double getLongitude() {
      return longitude;
    }

    public void setLongitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"longitude\" is null.");
      }
      this.longitude = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformLatLng() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformLatLng that = (PlatformLatLng) o;
      return latitude.equals(that.latitude) && longitude.equals(that.longitude);
    }

    @Override
    public int hashCode() {
      return Objects.hash(latitude, longitude);
    }

    public static final class Builder {

      private @Nullable Double latitude;

      @CanIgnoreReturnValue
      public @NonNull Builder setLatitude(@NonNull Double setterArg) {
        this.latitude = setterArg;
        return this;
      }

      private @Nullable Double longitude;

      @CanIgnoreReturnValue
      public @NonNull Builder setLongitude(@NonNull Double setterArg) {
        this.longitude = setterArg;
        return this;
      }

      public @NonNull PlatformLatLng build() {
        PlatformLatLng pigeonReturn = new PlatformLatLng();
        pigeonReturn.setLatitude(latitude);
        pigeonReturn.setLongitude(longitude);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(latitude);
      toListResult.add(longitude);
      return toListResult;
    }

    static @NonNull PlatformLatLng fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformLatLng pigeonResult = new PlatformLatLng();
      Object latitude = __pigeon_list.get(0);
      pigeonResult.setLatitude((Double) latitude);
      Object longitude = __pigeon_list.get(1);
      pigeonResult.setLongitude((Double) longitude);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of LatLngBounds.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformLatLngBounds {
    private @NonNull PlatformLatLng northeast;

    public @NonNull PlatformLatLng getNortheast() {
      return northeast;
    }

    public void setNortheast(@NonNull PlatformLatLng setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"northeast\" is null.");
      }
      this.northeast = setterArg;
    }

    private @NonNull PlatformLatLng southwest;

    public @NonNull PlatformLatLng getSouthwest() {
      return southwest;
    }

    public void setSouthwest(@NonNull PlatformLatLng setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"southwest\" is null.");
      }
      this.southwest = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformLatLngBounds() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformLatLngBounds that = (PlatformLatLngBounds) o;
      return northeast.equals(that.northeast) && southwest.equals(that.southwest);
    }

    @Override
    public int hashCode() {
      return Objects.hash(northeast, southwest);
    }

    public static final class Builder {

      private @Nullable PlatformLatLng northeast;

      @CanIgnoreReturnValue
      public @NonNull Builder setNortheast(@NonNull PlatformLatLng setterArg) {
        this.northeast = setterArg;
        return this;
      }

      private @Nullable PlatformLatLng southwest;

      @CanIgnoreReturnValue
      public @NonNull Builder setSouthwest(@NonNull PlatformLatLng setterArg) {
        this.southwest = setterArg;
        return this;
      }

      public @NonNull PlatformLatLngBounds build() {
        PlatformLatLngBounds pigeonReturn = new PlatformLatLngBounds();
        pigeonReturn.setNortheast(northeast);
        pigeonReturn.setSouthwest(southwest);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(northeast);
      toListResult.add(southwest);
      return toListResult;
    }

    static @NonNull PlatformLatLngBounds fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformLatLngBounds pigeonResult = new PlatformLatLngBounds();
      Object northeast = __pigeon_list.get(0);
      pigeonResult.setNortheast((PlatformLatLng) northeast);
      Object southwest = __pigeon_list.get(1);
      pigeonResult.setSouthwest((PlatformLatLng) southwest);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of Cluster.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformCluster {
    private @NonNull String clusterManagerId;

    public @NonNull String getClusterManagerId() {
      return clusterManagerId;
    }

    public void setClusterManagerId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"clusterManagerId\" is null.");
      }
      this.clusterManagerId = setterArg;
    }

    private @NonNull PlatformLatLng position;

    public @NonNull PlatformLatLng getPosition() {
      return position;
    }

    public void setPosition(@NonNull PlatformLatLng setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"position\" is null.");
      }
      this.position = setterArg;
    }

    private @NonNull PlatformLatLngBounds bounds;

    public @NonNull PlatformLatLngBounds getBounds() {
      return bounds;
    }

    public void setBounds(@NonNull PlatformLatLngBounds setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"bounds\" is null.");
      }
      this.bounds = setterArg;
    }

    private @NonNull List<String> markerIds;

    public @NonNull List<String> getMarkerIds() {
      return markerIds;
    }

    public void setMarkerIds(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"markerIds\" is null.");
      }
      this.markerIds = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformCluster() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformCluster that = (PlatformCluster) o;
      return clusterManagerId.equals(that.clusterManagerId)
          && position.equals(that.position)
          && bounds.equals(that.bounds)
          && markerIds.equals(that.markerIds);
    }

    @Override
    public int hashCode() {
      return Objects.hash(clusterManagerId, position, bounds, markerIds);
    }

    public static final class Builder {

      private @Nullable String clusterManagerId;

      @CanIgnoreReturnValue
      public @NonNull Builder setClusterManagerId(@NonNull String setterArg) {
        this.clusterManagerId = setterArg;
        return this;
      }

      private @Nullable PlatformLatLng position;

      @CanIgnoreReturnValue
      public @NonNull Builder setPosition(@NonNull PlatformLatLng setterArg) {
        this.position = setterArg;
        return this;
      }

      private @Nullable PlatformLatLngBounds bounds;

      @CanIgnoreReturnValue
      public @NonNull Builder setBounds(@NonNull PlatformLatLngBounds setterArg) {
        this.bounds = setterArg;
        return this;
      }

      private @Nullable List<String> markerIds;

      @CanIgnoreReturnValue
      public @NonNull Builder setMarkerIds(@NonNull List<String> setterArg) {
        this.markerIds = setterArg;
        return this;
      }

      public @NonNull PlatformCluster build() {
        PlatformCluster pigeonReturn = new PlatformCluster();
        pigeonReturn.setClusterManagerId(clusterManagerId);
        pigeonReturn.setPosition(position);
        pigeonReturn.setBounds(bounds);
        pigeonReturn.setMarkerIds(markerIds);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(clusterManagerId);
      toListResult.add(position);
      toListResult.add(bounds);
      toListResult.add(markerIds);
      return toListResult;
    }

    static @NonNull PlatformCluster fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformCluster pigeonResult = new PlatformCluster();
      Object clusterManagerId = __pigeon_list.get(0);
      pigeonResult.setClusterManagerId((String) clusterManagerId);
      Object position = __pigeon_list.get(1);
      pigeonResult.setPosition((PlatformLatLng) position);
      Object bounds = __pigeon_list.get(2);
      pigeonResult.setBounds((PlatformLatLngBounds) bounds);
      Object markerIds = __pigeon_list.get(3);
      pigeonResult.setMarkerIds((List<String>) markerIds);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of CameraTargetBounds.
   *
   * <p>As with the Dart version, it exists to distinguish between not setting a a target, and
   * having an explicitly unbounded target (null [bounds]).
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformCameraTargetBounds {
    private @Nullable PlatformLatLngBounds bounds;

    public @Nullable PlatformLatLngBounds getBounds() {
      return bounds;
    }

    public void setBounds(@Nullable PlatformLatLngBounds setterArg) {
      this.bounds = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformCameraTargetBounds that = (PlatformCameraTargetBounds) o;
      return Objects.equals(bounds, that.bounds);
    }

    @Override
    public int hashCode() {
      return Objects.hash(bounds);
    }

    public static final class Builder {

      private @Nullable PlatformLatLngBounds bounds;

      @CanIgnoreReturnValue
      public @NonNull Builder setBounds(@Nullable PlatformLatLngBounds setterArg) {
        this.bounds = setterArg;
        return this;
      }

      public @NonNull PlatformCameraTargetBounds build() {
        PlatformCameraTargetBounds pigeonReturn = new PlatformCameraTargetBounds();
        pigeonReturn.setBounds(bounds);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(bounds);
      return toListResult;
    }

    static @NonNull PlatformCameraTargetBounds fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformCameraTargetBounds pigeonResult = new PlatformCameraTargetBounds();
      Object bounds = __pigeon_list.get(0);
      pigeonResult.setBounds((PlatformLatLngBounds) bounds);
      return pigeonResult;
    }
  }

  /**
   * Information passed to the platform view creation.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformMapViewCreationParams {
    private @NonNull PlatformCameraPosition initialCameraPosition;

    public @NonNull PlatformCameraPosition getInitialCameraPosition() {
      return initialCameraPosition;
    }

    public void setInitialCameraPosition(@NonNull PlatformCameraPosition setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"initialCameraPosition\" is null.");
      }
      this.initialCameraPosition = setterArg;
    }

    private @NonNull PlatformMapConfiguration mapConfiguration;

    public @NonNull PlatformMapConfiguration getMapConfiguration() {
      return mapConfiguration;
    }

    public void setMapConfiguration(@NonNull PlatformMapConfiguration setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"mapConfiguration\" is null.");
      }
      this.mapConfiguration = setterArg;
    }

    private @NonNull List<PlatformCircle> initialCircles;

    public @NonNull List<PlatformCircle> getInitialCircles() {
      return initialCircles;
    }

    public void setInitialCircles(@NonNull List<PlatformCircle> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"initialCircles\" is null.");
      }
      this.initialCircles = setterArg;
    }

    private @NonNull List<PlatformMarker> initialMarkers;

    public @NonNull List<PlatformMarker> getInitialMarkers() {
      return initialMarkers;
    }

    public void setInitialMarkers(@NonNull List<PlatformMarker> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"initialMarkers\" is null.");
      }
      this.initialMarkers = setterArg;
    }

    private @NonNull List<PlatformPolygon> initialPolygons;

    public @NonNull List<PlatformPolygon> getInitialPolygons() {
      return initialPolygons;
    }

    public void setInitialPolygons(@NonNull List<PlatformPolygon> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"initialPolygons\" is null.");
      }
      this.initialPolygons = setterArg;
    }

    private @NonNull List<PlatformPolyline> initialPolylines;

    public @NonNull List<PlatformPolyline> getInitialPolylines() {
      return initialPolylines;
    }

    public void setInitialPolylines(@NonNull List<PlatformPolyline> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"initialPolylines\" is null.");
      }
      this.initialPolylines = setterArg;
    }

    private @NonNull List<PlatformHeatmap> initialHeatmaps;

    public @NonNull List<PlatformHeatmap> getInitialHeatmaps() {
      return initialHeatmaps;
    }

    public void setInitialHeatmaps(@NonNull List<PlatformHeatmap> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"initialHeatmaps\" is null.");
      }
      this.initialHeatmaps = setterArg;
    }

    private @NonNull List<PlatformTileOverlay> initialTileOverlays;

    public @NonNull List<PlatformTileOverlay> getInitialTileOverlays() {
      return initialTileOverlays;
    }

    public void setInitialTileOverlays(@NonNull List<PlatformTileOverlay> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"initialTileOverlays\" is null.");
      }
      this.initialTileOverlays = setterArg;
    }

    private @NonNull List<PlatformClusterManager> initialClusterManagers;

    public @NonNull List<PlatformClusterManager> getInitialClusterManagers() {
      return initialClusterManagers;
    }

    public void setInitialClusterManagers(@NonNull List<PlatformClusterManager> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"initialClusterManagers\" is null.");
      }
      this.initialClusterManagers = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformMapViewCreationParams() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformMapViewCreationParams that = (PlatformMapViewCreationParams) o;
      return initialCameraPosition.equals(that.initialCameraPosition)
          && mapConfiguration.equals(that.mapConfiguration)
          && initialCircles.equals(that.initialCircles)
          && initialMarkers.equals(that.initialMarkers)
          && initialPolygons.equals(that.initialPolygons)
          && initialPolylines.equals(that.initialPolylines)
          && initialHeatmaps.equals(that.initialHeatmaps)
          && initialTileOverlays.equals(that.initialTileOverlays)
          && initialClusterManagers.equals(that.initialClusterManagers);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          initialCameraPosition,
          mapConfiguration,
          initialCircles,
          initialMarkers,
          initialPolygons,
          initialPolylines,
          initialHeatmaps,
          initialTileOverlays,
          initialClusterManagers);
    }

    public static final class Builder {

      private @Nullable PlatformCameraPosition initialCameraPosition;

      @CanIgnoreReturnValue
      public @NonNull Builder setInitialCameraPosition(@NonNull PlatformCameraPosition setterArg) {
        this.initialCameraPosition = setterArg;
        return this;
      }

      private @Nullable PlatformMapConfiguration mapConfiguration;

      @CanIgnoreReturnValue
      public @NonNull Builder setMapConfiguration(@NonNull PlatformMapConfiguration setterArg) {
        this.mapConfiguration = setterArg;
        return this;
      }

      private @Nullable List<PlatformCircle> initialCircles;

      @CanIgnoreReturnValue
      public @NonNull Builder setInitialCircles(@NonNull List<PlatformCircle> setterArg) {
        this.initialCircles = setterArg;
        return this;
      }

      private @Nullable List<PlatformMarker> initialMarkers;

      @CanIgnoreReturnValue
      public @NonNull Builder setInitialMarkers(@NonNull List<PlatformMarker> setterArg) {
        this.initialMarkers = setterArg;
        return this;
      }

      private @Nullable List<PlatformPolygon> initialPolygons;

      @CanIgnoreReturnValue
      public @NonNull Builder setInitialPolygons(@NonNull List<PlatformPolygon> setterArg) {
        this.initialPolygons = setterArg;
        return this;
      }

      private @Nullable List<PlatformPolyline> initialPolylines;

      @CanIgnoreReturnValue
      public @NonNull Builder setInitialPolylines(@NonNull List<PlatformPolyline> setterArg) {
        this.initialPolylines = setterArg;
        return this;
      }

      private @Nullable List<PlatformHeatmap> initialHeatmaps;

      @CanIgnoreReturnValue
      public @NonNull Builder setInitialHeatmaps(@NonNull List<PlatformHeatmap> setterArg) {
        this.initialHeatmaps = setterArg;
        return this;
      }

      private @Nullable List<PlatformTileOverlay> initialTileOverlays;

      @CanIgnoreReturnValue
      public @NonNull Builder setInitialTileOverlays(@NonNull List<PlatformTileOverlay> setterArg) {
        this.initialTileOverlays = setterArg;
        return this;
      }

      private @Nullable List<PlatformClusterManager> initialClusterManagers;

      @CanIgnoreReturnValue
      public @NonNull Builder setInitialClusterManagers(
          @NonNull List<PlatformClusterManager> setterArg) {
        this.initialClusterManagers = setterArg;
        return this;
      }

      public @NonNull PlatformMapViewCreationParams build() {
        PlatformMapViewCreationParams pigeonReturn = new PlatformMapViewCreationParams();
        pigeonReturn.setInitialCameraPosition(initialCameraPosition);
        pigeonReturn.setMapConfiguration(mapConfiguration);
        pigeonReturn.setInitialCircles(initialCircles);
        pigeonReturn.setInitialMarkers(initialMarkers);
        pigeonReturn.setInitialPolygons(initialPolygons);
        pigeonReturn.setInitialPolylines(initialPolylines);
        pigeonReturn.setInitialHeatmaps(initialHeatmaps);
        pigeonReturn.setInitialTileOverlays(initialTileOverlays);
        pigeonReturn.setInitialClusterManagers(initialClusterManagers);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(9);
      toListResult.add(initialCameraPosition);
      toListResult.add(mapConfiguration);
      toListResult.add(initialCircles);
      toListResult.add(initialMarkers);
      toListResult.add(initialPolygons);
      toListResult.add(initialPolylines);
      toListResult.add(initialHeatmaps);
      toListResult.add(initialTileOverlays);
      toListResult.add(initialClusterManagers);
      return toListResult;
    }

    static @NonNull PlatformMapViewCreationParams fromList(
        @NonNull ArrayList<Object> __pigeon_list) {
      PlatformMapViewCreationParams pigeonResult = new PlatformMapViewCreationParams();
      Object initialCameraPosition = __pigeon_list.get(0);
      pigeonResult.setInitialCameraPosition((PlatformCameraPosition) initialCameraPosition);
      Object mapConfiguration = __pigeon_list.get(1);
      pigeonResult.setMapConfiguration((PlatformMapConfiguration) mapConfiguration);
      Object initialCircles = __pigeon_list.get(2);
      pigeonResult.setInitialCircles((List<PlatformCircle>) initialCircles);
      Object initialMarkers = __pigeon_list.get(3);
      pigeonResult.setInitialMarkers((List<PlatformMarker>) initialMarkers);
      Object initialPolygons = __pigeon_list.get(4);
      pigeonResult.setInitialPolygons((List<PlatformPolygon>) initialPolygons);
      Object initialPolylines = __pigeon_list.get(5);
      pigeonResult.setInitialPolylines((List<PlatformPolyline>) initialPolylines);
      Object initialHeatmaps = __pigeon_list.get(6);
      pigeonResult.setInitialHeatmaps((List<PlatformHeatmap>) initialHeatmaps);
      Object initialTileOverlays = __pigeon_list.get(7);
      pigeonResult.setInitialTileOverlays((List<PlatformTileOverlay>) initialTileOverlays);
      Object initialClusterManagers = __pigeon_list.get(8);
      pigeonResult.setInitialClusterManagers((List<PlatformClusterManager>) initialClusterManagers);
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of MapConfiguration.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformMapConfiguration {
    private @Nullable Boolean compassEnabled;

    public @Nullable Boolean getCompassEnabled() {
      return compassEnabled;
    }

    public void setCompassEnabled(@Nullable Boolean setterArg) {
      this.compassEnabled = setterArg;
    }

    private @Nullable PlatformCameraTargetBounds cameraTargetBounds;

    public @Nullable PlatformCameraTargetBounds getCameraTargetBounds() {
      return cameraTargetBounds;
    }

    public void setCameraTargetBounds(@Nullable PlatformCameraTargetBounds setterArg) {
      this.cameraTargetBounds = setterArg;
    }

    private @Nullable PlatformMapType mapType;

    public @Nullable PlatformMapType getMapType() {
      return mapType;
    }

    public void setMapType(@Nullable PlatformMapType setterArg) {
      this.mapType = setterArg;
    }

    private @Nullable PlatformZoomRange minMaxZoomPreference;

    public @Nullable PlatformZoomRange getMinMaxZoomPreference() {
      return minMaxZoomPreference;
    }

    public void setMinMaxZoomPreference(@Nullable PlatformZoomRange setterArg) {
      this.minMaxZoomPreference = setterArg;
    }

    private @Nullable Boolean mapToolbarEnabled;

    public @Nullable Boolean getMapToolbarEnabled() {
      return mapToolbarEnabled;
    }

    public void setMapToolbarEnabled(@Nullable Boolean setterArg) {
      this.mapToolbarEnabled = setterArg;
    }

    private @Nullable Boolean rotateGesturesEnabled;

    public @Nullable Boolean getRotateGesturesEnabled() {
      return rotateGesturesEnabled;
    }

    public void setRotateGesturesEnabled(@Nullable Boolean setterArg) {
      this.rotateGesturesEnabled = setterArg;
    }

    private @Nullable Boolean scrollGesturesEnabled;

    public @Nullable Boolean getScrollGesturesEnabled() {
      return scrollGesturesEnabled;
    }

    public void setScrollGesturesEnabled(@Nullable Boolean setterArg) {
      this.scrollGesturesEnabled = setterArg;
    }

    private @Nullable Boolean tiltGesturesEnabled;

    public @Nullable Boolean getTiltGesturesEnabled() {
      return tiltGesturesEnabled;
    }

    public void setTiltGesturesEnabled(@Nullable Boolean setterArg) {
      this.tiltGesturesEnabled = setterArg;
    }

    private @Nullable Boolean trackCameraPosition;

    public @Nullable Boolean getTrackCameraPosition() {
      return trackCameraPosition;
    }

    public void setTrackCameraPosition(@Nullable Boolean setterArg) {
      this.trackCameraPosition = setterArg;
    }

    private @Nullable Boolean zoomControlsEnabled;

    public @Nullable Boolean getZoomControlsEnabled() {
      return zoomControlsEnabled;
    }

    public void setZoomControlsEnabled(@Nullable Boolean setterArg) {
      this.zoomControlsEnabled = setterArg;
    }

    private @Nullable Boolean zoomGesturesEnabled;

    public @Nullable Boolean getZoomGesturesEnabled() {
      return zoomGesturesEnabled;
    }

    public void setZoomGesturesEnabled(@Nullable Boolean setterArg) {
      this.zoomGesturesEnabled = setterArg;
    }

    private @Nullable Boolean myLocationEnabled;

    public @Nullable Boolean getMyLocationEnabled() {
      return myLocationEnabled;
    }

    public void setMyLocationEnabled(@Nullable Boolean setterArg) {
      this.myLocationEnabled = setterArg;
    }

    private @Nullable Boolean myLocationButtonEnabled;

    public @Nullable Boolean getMyLocationButtonEnabled() {
      return myLocationButtonEnabled;
    }

    public void setMyLocationButtonEnabled(@Nullable Boolean setterArg) {
      this.myLocationButtonEnabled = setterArg;
    }

    private @Nullable PlatformEdgeInsets padding;

    public @Nullable PlatformEdgeInsets getPadding() {
      return padding;
    }

    public void setPadding(@Nullable PlatformEdgeInsets setterArg) {
      this.padding = setterArg;
    }

    private @Nullable Boolean indoorViewEnabled;

    public @Nullable Boolean getIndoorViewEnabled() {
      return indoorViewEnabled;
    }

    public void setIndoorViewEnabled(@Nullable Boolean setterArg) {
      this.indoorViewEnabled = setterArg;
    }

    private @Nullable Boolean trafficEnabled;

    public @Nullable Boolean getTrafficEnabled() {
      return trafficEnabled;
    }

    public void setTrafficEnabled(@Nullable Boolean setterArg) {
      this.trafficEnabled = setterArg;
    }

    private @Nullable Boolean buildingsEnabled;

    public @Nullable Boolean getBuildingsEnabled() {
      return buildingsEnabled;
    }

    public void setBuildingsEnabled(@Nullable Boolean setterArg) {
      this.buildingsEnabled = setterArg;
    }

    private @Nullable Boolean liteModeEnabled;

    public @Nullable Boolean getLiteModeEnabled() {
      return liteModeEnabled;
    }

    public void setLiteModeEnabled(@Nullable Boolean setterArg) {
      this.liteModeEnabled = setterArg;
    }

    private @Nullable String cloudMapId;

    public @Nullable String getCloudMapId() {
      return cloudMapId;
    }

    public void setCloudMapId(@Nullable String setterArg) {
      this.cloudMapId = setterArg;
    }

    private @Nullable String style;

    public @Nullable String getStyle() {
      return style;
    }

    public void setStyle(@Nullable String setterArg) {
      this.style = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformMapConfiguration that = (PlatformMapConfiguration) o;
      return Objects.equals(compassEnabled, that.compassEnabled)
          && Objects.equals(cameraTargetBounds, that.cameraTargetBounds)
          && Objects.equals(mapType, that.mapType)
          && Objects.equals(minMaxZoomPreference, that.minMaxZoomPreference)
          && Objects.equals(mapToolbarEnabled, that.mapToolbarEnabled)
          && Objects.equals(rotateGesturesEnabled, that.rotateGesturesEnabled)
          && Objects.equals(scrollGesturesEnabled, that.scrollGesturesEnabled)
          && Objects.equals(tiltGesturesEnabled, that.tiltGesturesEnabled)
          && Objects.equals(trackCameraPosition, that.trackCameraPosition)
          && Objects.equals(zoomControlsEnabled, that.zoomControlsEnabled)
          && Objects.equals(zoomGesturesEnabled, that.zoomGesturesEnabled)
          && Objects.equals(myLocationEnabled, that.myLocationEnabled)
          && Objects.equals(myLocationButtonEnabled, that.myLocationButtonEnabled)
          && Objects.equals(padding, that.padding)
          && Objects.equals(indoorViewEnabled, that.indoorViewEnabled)
          && Objects.equals(trafficEnabled, that.trafficEnabled)
          && Objects.equals(buildingsEnabled, that.buildingsEnabled)
          && Objects.equals(liteModeEnabled, that.liteModeEnabled)
          && Objects.equals(cloudMapId, that.cloudMapId)
          && Objects.equals(style, that.style);
    }

    @Override
    public int hashCode() {
      return Objects.hash(
          compassEnabled,
          cameraTargetBounds,
          mapType,
          minMaxZoomPreference,
          mapToolbarEnabled,
          rotateGesturesEnabled,
          scrollGesturesEnabled,
          tiltGesturesEnabled,
          trackCameraPosition,
          zoomControlsEnabled,
          zoomGesturesEnabled,
          myLocationEnabled,
          myLocationButtonEnabled,
          padding,
          indoorViewEnabled,
          trafficEnabled,
          buildingsEnabled,
          liteModeEnabled,
          cloudMapId,
          style);
    }

    public static final class Builder {

      private @Nullable Boolean compassEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setCompassEnabled(@Nullable Boolean setterArg) {
        this.compassEnabled = setterArg;
        return this;
      }

      private @Nullable PlatformCameraTargetBounds cameraTargetBounds;

      @CanIgnoreReturnValue
      public @NonNull Builder setCameraTargetBounds(
          @Nullable PlatformCameraTargetBounds setterArg) {
        this.cameraTargetBounds = setterArg;
        return this;
      }

      private @Nullable PlatformMapType mapType;

      @CanIgnoreReturnValue
      public @NonNull Builder setMapType(@Nullable PlatformMapType setterArg) {
        this.mapType = setterArg;
        return this;
      }

      private @Nullable PlatformZoomRange minMaxZoomPreference;

      @CanIgnoreReturnValue
      public @NonNull Builder setMinMaxZoomPreference(@Nullable PlatformZoomRange setterArg) {
        this.minMaxZoomPreference = setterArg;
        return this;
      }

      private @Nullable Boolean mapToolbarEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setMapToolbarEnabled(@Nullable Boolean setterArg) {
        this.mapToolbarEnabled = setterArg;
        return this;
      }

      private @Nullable Boolean rotateGesturesEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setRotateGesturesEnabled(@Nullable Boolean setterArg) {
        this.rotateGesturesEnabled = setterArg;
        return this;
      }

      private @Nullable Boolean scrollGesturesEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setScrollGesturesEnabled(@Nullable Boolean setterArg) {
        this.scrollGesturesEnabled = setterArg;
        return this;
      }

      private @Nullable Boolean tiltGesturesEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setTiltGesturesEnabled(@Nullable Boolean setterArg) {
        this.tiltGesturesEnabled = setterArg;
        return this;
      }

      private @Nullable Boolean trackCameraPosition;

      @CanIgnoreReturnValue
      public @NonNull Builder setTrackCameraPosition(@Nullable Boolean setterArg) {
        this.trackCameraPosition = setterArg;
        return this;
      }

      private @Nullable Boolean zoomControlsEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setZoomControlsEnabled(@Nullable Boolean setterArg) {
        this.zoomControlsEnabled = setterArg;
        return this;
      }

      private @Nullable Boolean zoomGesturesEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setZoomGesturesEnabled(@Nullable Boolean setterArg) {
        this.zoomGesturesEnabled = setterArg;
        return this;
      }

      private @Nullable Boolean myLocationEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setMyLocationEnabled(@Nullable Boolean setterArg) {
        this.myLocationEnabled = setterArg;
        return this;
      }

      private @Nullable Boolean myLocationButtonEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setMyLocationButtonEnabled(@Nullable Boolean setterArg) {
        this.myLocationButtonEnabled = setterArg;
        return this;
      }

      private @Nullable PlatformEdgeInsets padding;

      @CanIgnoreReturnValue
      public @NonNull Builder setPadding(@Nullable PlatformEdgeInsets setterArg) {
        this.padding = setterArg;
        return this;
      }

      private @Nullable Boolean indoorViewEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setIndoorViewEnabled(@Nullable Boolean setterArg) {
        this.indoorViewEnabled = setterArg;
        return this;
      }

      private @Nullable Boolean trafficEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setTrafficEnabled(@Nullable Boolean setterArg) {
        this.trafficEnabled = setterArg;
        return this;
      }

      private @Nullable Boolean buildingsEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setBuildingsEnabled(@Nullable Boolean setterArg) {
        this.buildingsEnabled = setterArg;
        return this;
      }

      private @Nullable Boolean liteModeEnabled;

      @CanIgnoreReturnValue
      public @NonNull Builder setLiteModeEnabled(@Nullable Boolean setterArg) {
        this.liteModeEnabled = setterArg;
        return this;
      }

      private @Nullable String cloudMapId;

      @CanIgnoreReturnValue
      public @NonNull Builder setCloudMapId(@Nullable String setterArg) {
        this.cloudMapId = setterArg;
        return this;
      }

      private @Nullable String style;

      @CanIgnoreReturnValue
      public @NonNull Builder setStyle(@Nullable String setterArg) {
        this.style = setterArg;
        return this;
      }

      public @NonNull PlatformMapConfiguration build() {
        PlatformMapConfiguration pigeonReturn = new PlatformMapConfiguration();
        pigeonReturn.setCompassEnabled(compassEnabled);
        pigeonReturn.setCameraTargetBounds(cameraTargetBounds);
        pigeonReturn.setMapType(mapType);
        pigeonReturn.setMinMaxZoomPreference(minMaxZoomPreference);
        pigeonReturn.setMapToolbarEnabled(mapToolbarEnabled);
        pigeonReturn.setRotateGesturesEnabled(rotateGesturesEnabled);
        pigeonReturn.setScrollGesturesEnabled(scrollGesturesEnabled);
        pigeonReturn.setTiltGesturesEnabled(tiltGesturesEnabled);
        pigeonReturn.setTrackCameraPosition(trackCameraPosition);
        pigeonReturn.setZoomControlsEnabled(zoomControlsEnabled);
        pigeonReturn.setZoomGesturesEnabled(zoomGesturesEnabled);
        pigeonReturn.setMyLocationEnabled(myLocationEnabled);
        pigeonReturn.setMyLocationButtonEnabled(myLocationButtonEnabled);
        pigeonReturn.setPadding(padding);
        pigeonReturn.setIndoorViewEnabled(indoorViewEnabled);
        pigeonReturn.setTrafficEnabled(trafficEnabled);
        pigeonReturn.setBuildingsEnabled(buildingsEnabled);
        pigeonReturn.setLiteModeEnabled(liteModeEnabled);
        pigeonReturn.setCloudMapId(cloudMapId);
        pigeonReturn.setStyle(style);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(20);
      toListResult.add(compassEnabled);
      toListResult.add(cameraTargetBounds);
      toListResult.add(mapType);
      toListResult.add(minMaxZoomPreference);
      toListResult.add(mapToolbarEnabled);
      toListResult.add(rotateGesturesEnabled);
      toListResult.add(scrollGesturesEnabled);
      toListResult.add(tiltGesturesEnabled);
      toListResult.add(trackCameraPosition);
      toListResult.add(zoomControlsEnabled);
      toListResult.add(zoomGesturesEnabled);
      toListResult.add(myLocationEnabled);
      toListResult.add(myLocationButtonEnabled);
      toListResult.add(padding);
      toListResult.add(indoorViewEnabled);
      toListResult.add(trafficEnabled);
      toListResult.add(buildingsEnabled);
      toListResult.add(liteModeEnabled);
      toListResult.add(cloudMapId);
      toListResult.add(style);
      return toListResult;
    }

    static @NonNull PlatformMapConfiguration fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformMapConfiguration pigeonResult = new PlatformMapConfiguration();
      Object compassEnabled = __pigeon_list.get(0);
      pigeonResult.setCompassEnabled((Boolean) compassEnabled);
      Object cameraTargetBounds = __pigeon_list.get(1);
      pigeonResult.setCameraTargetBounds((PlatformCameraTargetBounds) cameraTargetBounds);
      Object mapType = __pigeon_list.get(2);
      pigeonResult.setMapType((PlatformMapType) mapType);
      Object minMaxZoomPreference = __pigeon_list.get(3);
      pigeonResult.setMinMaxZoomPreference((PlatformZoomRange) minMaxZoomPreference);
      Object mapToolbarEnabled = __pigeon_list.get(4);
      pigeonResult.setMapToolbarEnabled((Boolean) mapToolbarEnabled);
      Object rotateGesturesEnabled = __pigeon_list.get(5);
      pigeonResult.setRotateGesturesEnabled((Boolean) rotateGesturesEnabled);
      Object scrollGesturesEnabled = __pigeon_list.get(6);
      pigeonResult.setScrollGesturesEnabled((Boolean) scrollGesturesEnabled);
      Object tiltGesturesEnabled = __pigeon_list.get(7);
      pigeonResult.setTiltGesturesEnabled((Boolean) tiltGesturesEnabled);
      Object trackCameraPosition = __pigeon_list.get(8);
      pigeonResult.setTrackCameraPosition((Boolean) trackCameraPosition);
      Object zoomControlsEnabled = __pigeon_list.get(9);
      pigeonResult.setZoomControlsEnabled((Boolean) zoomControlsEnabled);
      Object zoomGesturesEnabled = __pigeon_list.get(10);
      pigeonResult.setZoomGesturesEnabled((Boolean) zoomGesturesEnabled);
      Object myLocationEnabled = __pigeon_list.get(11);
      pigeonResult.setMyLocationEnabled((Boolean) myLocationEnabled);
      Object myLocationButtonEnabled = __pigeon_list.get(12);
      pigeonResult.setMyLocationButtonEnabled((Boolean) myLocationButtonEnabled);
      Object padding = __pigeon_list.get(13);
      pigeonResult.setPadding((PlatformEdgeInsets) padding);
      Object indoorViewEnabled = __pigeon_list.get(14);
      pigeonResult.setIndoorViewEnabled((Boolean) indoorViewEnabled);
      Object trafficEnabled = __pigeon_list.get(15);
      pigeonResult.setTrafficEnabled((Boolean) trafficEnabled);
      Object buildingsEnabled = __pigeon_list.get(16);
      pigeonResult.setBuildingsEnabled((Boolean) buildingsEnabled);
      Object liteModeEnabled = __pigeon_list.get(17);
      pigeonResult.setLiteModeEnabled((Boolean) liteModeEnabled);
      Object cloudMapId = __pigeon_list.get(18);
      pigeonResult.setCloudMapId((String) cloudMapId);
      Object style = __pigeon_list.get(19);
      pigeonResult.setStyle((String) style);
      return pigeonResult;
    }
  }

  /**
   * Pigeon representation of an x,y coordinate.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformPoint {
    private @NonNull Long x;

    public @NonNull Long getX() {
      return x;
    }

    public void setX(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"x\" is null.");
      }
      this.x = setterArg;
    }

    private @NonNull Long y;

    public @NonNull Long getY() {
      return y;
    }

    public void setY(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"y\" is null.");
      }
      this.y = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformPoint() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformPoint that = (PlatformPoint) o;
      return x.equals(that.x) && y.equals(that.y);
    }

    @Override
    public int hashCode() {
      return Objects.hash(x, y);
    }

    public static final class Builder {

      private @Nullable Long x;

      @CanIgnoreReturnValue
      public @NonNull Builder setX(@NonNull Long setterArg) {
        this.x = setterArg;
        return this;
      }

      private @Nullable Long y;

      @CanIgnoreReturnValue
      public @NonNull Builder setY(@NonNull Long setterArg) {
        this.y = setterArg;
        return this;
      }

      public @NonNull PlatformPoint build() {
        PlatformPoint pigeonReturn = new PlatformPoint();
        pigeonReturn.setX(x);
        pigeonReturn.setY(y);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(x);
      toListResult.add(y);
      return toListResult;
    }

    static @NonNull PlatformPoint fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformPoint pigeonResult = new PlatformPoint();
      Object x = __pigeon_list.get(0);
      pigeonResult.setX((x == null) ? null : ((x instanceof Integer) ? (Integer) x : (Long) x));
      Object y = __pigeon_list.get(1);
      pigeonResult.setY((y == null) ? null : ((y instanceof Integer) ? (Integer) y : (Long) y));
      return pigeonResult;
    }
  }

  /**
   * Pigeon equivalent of native TileOverlay properties.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformTileLayer {
    private @NonNull Boolean visible;

    public @NonNull Boolean getVisible() {
      return visible;
    }

    public void setVisible(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"visible\" is null.");
      }
      this.visible = setterArg;
    }

    private @NonNull Boolean fadeIn;

    public @NonNull Boolean getFadeIn() {
      return fadeIn;
    }

    public void setFadeIn(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fadeIn\" is null.");
      }
      this.fadeIn = setterArg;
    }

    private @NonNull Double transparency;

    public @NonNull Double getTransparency() {
      return transparency;
    }

    public void setTransparency(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"transparency\" is null.");
      }
      this.transparency = setterArg;
    }

    private @NonNull Double zIndex;

    public @NonNull Double getZIndex() {
      return zIndex;
    }

    public void setZIndex(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"zIndex\" is null.");
      }
      this.zIndex = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PlatformTileLayer() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformTileLayer that = (PlatformTileLayer) o;
      return visible.equals(that.visible)
          && fadeIn.equals(that.fadeIn)
          && transparency.equals(that.transparency)
          && zIndex.equals(that.zIndex);
    }

    @Override
    public int hashCode() {
      return Objects.hash(visible, fadeIn, transparency, zIndex);
    }

    public static final class Builder {

      private @Nullable Boolean visible;

      @CanIgnoreReturnValue
      public @NonNull Builder setVisible(@NonNull Boolean setterArg) {
        this.visible = setterArg;
        return this;
      }

      private @Nullable Boolean fadeIn;

      @CanIgnoreReturnValue
      public @NonNull Builder setFadeIn(@NonNull Boolean setterArg) {
        this.fadeIn = setterArg;
        return this;
      }

      private @Nullable Double transparency;

      @CanIgnoreReturnValue
      public @NonNull Builder setTransparency(@NonNull Double setterArg) {
        this.transparency = setterArg;
        return this;
      }

      private @Nullable Double zIndex;

      @CanIgnoreReturnValue
      public @NonNull Builder setZIndex(@NonNull Double setterArg) {
        this.zIndex = setterArg;
        return this;
      }

      public @NonNull PlatformTileLayer build() {
        PlatformTileLayer pigeonReturn = new PlatformTileLayer();
        pigeonReturn.setVisible(visible);
        pigeonReturn.setFadeIn(fadeIn);
        pigeonReturn.setTransparency(transparency);
        pigeonReturn.setZIndex(zIndex);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(visible);
      toListResult.add(fadeIn);
      toListResult.add(transparency);
      toListResult.add(zIndex);
      return toListResult;
    }

    static @NonNull PlatformTileLayer fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformTileLayer pigeonResult = new PlatformTileLayer();
      Object visible = __pigeon_list.get(0);
      pigeonResult.setVisible((Boolean) visible);
      Object fadeIn = __pigeon_list.get(1);
      pigeonResult.setFadeIn((Boolean) fadeIn);
      Object transparency = __pigeon_list.get(2);
      pigeonResult.setTransparency((Double) transparency);
      Object zIndex = __pigeon_list.get(3);
      pigeonResult.setZIndex((Double) zIndex);
      return pigeonResult;
    }
  }

  /**
   * Possible outcomes of launching a URL.
   *
   * <p>Generated class from Pigeon that represents data sent in messages.
   */
  public static final class PlatformZoomRange {
    private @Nullable Double min;

    public @Nullable Double getMin() {
      return min;
    }

    public void setMin(@Nullable Double setterArg) {
      this.min = setterArg;
    }

    private @Nullable Double max;

    public @Nullable Double getMax() {
      return max;
    }

    public void setMax(@Nullable Double setterArg) {
      this.max = setterArg;
    }

    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      PlatformZoomRange that = (PlatformZoomRange) o;
      return Objects.equals(min, that.min) && Objects.equals(max, that.max);
    }

    @Override
    public int hashCode() {
      return Objects.hash(min, max);
    }

    public static final class Builder {

      private @Nullable Double min;

      @CanIgnoreReturnValue
      public @NonNull Builder setMin(@Nullable Double setterArg) {
        this.min = setterArg;
        return this;
      }

      private @Nullable Double max;

      @CanIgnoreReturnValue
      public @NonNull Builder setMax(@Nullable Double setterArg) {
        this.max = setterArg;
        return this;
      }

      public @NonNull PlatformZoomRange build() {
        PlatformZoomRange pigeonReturn = new PlatformZoomRange();
        pigeonReturn.setMin(min);
        pigeonReturn.setMax(max);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(min);
      toListResult.add(max);
      return toListResult;
    }

    static @NonNull PlatformZoomRange fromList(@NonNull ArrayList<Object> __pigeon_list) {
      PlatformZoomRange pigeonResult = new PlatformZoomRange();
      Object min = __pigeon_list.get(0);
      pigeonResult.setMin((Double) min);
      Object max = __pigeon_list.get(1);
      pigeonResult.setMax((Double) max);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return PlatformCameraPosition.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PlatformCameraUpdate.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PlatformCircle.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PlatformHeatmap.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PlatformClusterManager.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return PlatformOffset.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return PlatformInfoWindow.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return PlatformMarker.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return PlatformPolygon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return PlatformPolyline.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return PlatformTile.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return PlatformTileOverlay.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return PlatformEdgeInsets.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return PlatformLatLng.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 143:
          return PlatformLatLngBounds.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 144:
          return PlatformCluster.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 145:
          return PlatformCameraTargetBounds.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 146:
          return PlatformMapViewCreationParams.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 147:
          return PlatformMapConfiguration.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 148:
          return PlatformPoint.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 149:
          return PlatformTileLayer.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 150:
          return PlatformZoomRange.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 151:
          {
            Object value = readValue(buffer);
            return value == null ? null : PlatformMapType.values()[(int) value];
          }
        case (byte) 152:
          {
            Object value = readValue(buffer);
            return value == null ? null : PlatformRendererType.values()[(int) value];
          }
        case (byte) 153:
          {
            Object value = readValue(buffer);
            return value == null ? null : PlatformJointType.values()[(int) value];
          }
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PlatformCameraPosition) {
        stream.write(129);
        writeValue(stream, ((PlatformCameraPosition) value).toList());
      } else if (value instanceof PlatformCameraUpdate) {
        stream.write(130);
        writeValue(stream, ((PlatformCameraUpdate) value).toList());
      } else if (value instanceof PlatformCircle) {
        stream.write(131);
        writeValue(stream, ((PlatformCircle) value).toList());
      } else if (value instanceof PlatformHeatmap) {
        stream.write(132);
        writeValue(stream, ((PlatformHeatmap) value).toList());
      } else if (value instanceof PlatformClusterManager) {
        stream.write(133);
        writeValue(stream, ((PlatformClusterManager) value).toList());
      } else if (value instanceof PlatformOffset) {
        stream.write(134);
        writeValue(stream, ((PlatformOffset) value).toList());
      } else if (value instanceof PlatformInfoWindow) {
        stream.write(135);
        writeValue(stream, ((PlatformInfoWindow) value).toList());
      } else if (value instanceof PlatformMarker) {
        stream.write(136);
        writeValue(stream, ((PlatformMarker) value).toList());
      } else if (value instanceof PlatformPolygon) {
        stream.write(137);
        writeValue(stream, ((PlatformPolygon) value).toList());
      } else if (value instanceof PlatformPolyline) {
        stream.write(138);
        writeValue(stream, ((PlatformPolyline) value).toList());
      } else if (value instanceof PlatformTile) {
        stream.write(139);
        writeValue(stream, ((PlatformTile) value).toList());
      } else if (value instanceof PlatformTileOverlay) {
        stream.write(140);
        writeValue(stream, ((PlatformTileOverlay) value).toList());
      } else if (value instanceof PlatformEdgeInsets) {
        stream.write(141);
        writeValue(stream, ((PlatformEdgeInsets) value).toList());
      } else if (value instanceof PlatformLatLng) {
        stream.write(142);
        writeValue(stream, ((PlatformLatLng) value).toList());
      } else if (value instanceof PlatformLatLngBounds) {
        stream.write(143);
        writeValue(stream, ((PlatformLatLngBounds) value).toList());
      } else if (value instanceof PlatformCluster) {
        stream.write(144);
        writeValue(stream, ((PlatformCluster) value).toList());
      } else if (value instanceof PlatformCameraTargetBounds) {
        stream.write(145);
        writeValue(stream, ((PlatformCameraTargetBounds) value).toList());
      } else if (value instanceof PlatformMapViewCreationParams) {
        stream.write(146);
        writeValue(stream, ((PlatformMapViewCreationParams) value).toList());
      } else if (value instanceof PlatformMapConfiguration) {
        stream.write(147);
        writeValue(stream, ((PlatformMapConfiguration) value).toList());
      } else if (value instanceof PlatformPoint) {
        stream.write(148);
        writeValue(stream, ((PlatformPoint) value).toList());
      } else if (value instanceof PlatformTileLayer) {
        stream.write(149);
        writeValue(stream, ((PlatformTileLayer) value).toList());
      } else if (value instanceof PlatformZoomRange) {
        stream.write(150);
        writeValue(stream, ((PlatformZoomRange) value).toList());
      } else if (value instanceof PlatformMapType) {
        stream.write(151);
        writeValue(stream, value == null ? null : ((PlatformMapType) value).index);
      } else if (value instanceof PlatformRendererType) {
        stream.write(152);
        writeValue(stream, value == null ? null : ((PlatformRendererType) value).index);
      } else if (value instanceof PlatformJointType) {
        stream.write(153);
        writeValue(stream, value == null ? null : ((PlatformJointType) value).index);
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /**
   * Interface for non-test interactions with the native SDK.
   *
   * <p>For test-only state queries, see [MapsInspectorApi].
   *
   * <p>Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface MapsApi {
    /** Returns once the map instance is available. */
    void waitForMap(@NonNull VoidResult result);
    /**
     * Updates the map's configuration options.
     *
     * <p>Only non-null configuration values will result in updates; options with null values will
     * remain unchanged.
     */
    void updateMapConfiguration(@NonNull PlatformMapConfiguration configuration);
    /** Updates the set of circles on the map. */
    void updateCircles(
        @NonNull List<PlatformCircle> toAdd,
        @NonNull List<PlatformCircle> toChange,
        @NonNull List<String> idsToRemove);
    /** Updates the set of heatmaps on the map. */
    void updateHeatmaps(
        @NonNull List<PlatformHeatmap> toAdd,
        @NonNull List<PlatformHeatmap> toChange,
        @NonNull List<String> idsToRemove);
    /** Updates the set of custer managers for clusters on the map. */
    void updateClusterManagers(
        @NonNull List<PlatformClusterManager> toAdd, @NonNull List<String> idsToRemove);
    /** Updates the set of markers on the map. */
    void updateMarkers(
        @NonNull List<PlatformMarker> toAdd,
        @NonNull List<PlatformMarker> toChange,
        @NonNull List<String> idsToRemove);
    /** Updates the set of polygonss on the map. */
    void updatePolygons(
        @NonNull List<PlatformPolygon> toAdd,
        @NonNull List<PlatformPolygon> toChange,
        @NonNull List<String> idsToRemove);
    /** Updates the set of polylines on the map. */
    void updatePolylines(
        @NonNull List<PlatformPolyline> toAdd,
        @NonNull List<PlatformPolyline> toChange,
        @NonNull List<String> idsToRemove);
    /** Updates the set of tile overlays on the map. */
    void updateTileOverlays(
        @NonNull List<PlatformTileOverlay> toAdd,
        @NonNull List<PlatformTileOverlay> toChange,
        @NonNull List<String> idsToRemove);
    /** Gets the screen coordinate for the given map location. */
    @NonNull
    PlatformPoint getScreenCoordinate(@NonNull PlatformLatLng latLng);
    /** Gets the map location for the given screen coordinate. */
    @NonNull
    PlatformLatLng getLatLng(@NonNull PlatformPoint screenCoordinate);
    /** Gets the map region currently displayed on the map. */
    @NonNull
    PlatformLatLngBounds getVisibleRegion();
    /** Moves the camera according to [cameraUpdate] immediately, with no animation. */
    void moveCamera(@NonNull PlatformCameraUpdate cameraUpdate);
    /** Moves the camera according to [cameraUpdate], animating the update. */
    void animateCamera(@NonNull PlatformCameraUpdate cameraUpdate);
    /** Gets the current map zoom level. */
    @NonNull
    Double getZoomLevel();
    /** Show the info window for the marker with the given ID. */
    void showInfoWindow(@NonNull String markerId);
    /** Hide the info window for the marker with the given ID. */
    void hideInfoWindow(@NonNull String markerId);
    /** Returns true if the marker with the given ID is currently displaying its info window. */
    @NonNull
    Boolean isInfoWindowShown(@NonNull String markerId);
    /**
     * Sets the style to the given map style string, where an empty string indicates that the style
     * should be cleared.
     *
     * <p>Returns false if there was an error setting the style, such as an invalid style string.
     */
    @NonNull
    Boolean setStyle(@NonNull String style);
    /**
     * Returns true if the last attempt to set a style, either via initial map style or setMapStyle,
     * succeeded.
     *
     * <p>This allows checking asynchronously for initial style failures, as there is no way to
     * return failures from map initialization.
     */
    @NonNull
    Boolean didLastStyleSucceed();
    /** Clears the cache of tiles previously requseted from the tile provider. */
    void clearTileCache(@NonNull String tileOverlayId);
    /** Takes a snapshot of the map and returns its image data. */
    void takeSnapshot(@NonNull Result<byte[]> result);

    /** The codec used by MapsApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /** Sets up an instance of `MapsApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable MapsApi api) {
      setUp(binaryMessenger, "", api);
    }

    static void setUp(
        @NonNull BinaryMessenger binaryMessenger,
        @NonNull String messageChannelSuffix,
        @Nullable MapsApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.waitForMap"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                VoidResult resultCallback =
                    new VoidResult() {
                      public void success() {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.waitForMap(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.updateMapConfiguration"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlatformMapConfiguration configurationArg = (PlatformMapConfiguration) args.get(0);
                try {
                  api.updateMapConfiguration(configurationArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.updateCircles"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<PlatformCircle> toAddArg = (List<PlatformCircle>) args.get(0);
                List<PlatformCircle> toChangeArg = (List<PlatformCircle>) args.get(1);
                List<String> idsToRemoveArg = (List<String>) args.get(2);
                try {
                  api.updateCircles(toAddArg, toChangeArg, idsToRemoveArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.updateHeatmaps"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<PlatformHeatmap> toAddArg = (List<PlatformHeatmap>) args.get(0);
                List<PlatformHeatmap> toChangeArg = (List<PlatformHeatmap>) args.get(1);
                List<String> idsToRemoveArg = (List<String>) args.get(2);
                try {
                  api.updateHeatmaps(toAddArg, toChangeArg, idsToRemoveArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.updateClusterManagers"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<PlatformClusterManager> toAddArg = (List<PlatformClusterManager>) args.get(0);
                List<String> idsToRemoveArg = (List<String>) args.get(1);
                try {
                  api.updateClusterManagers(toAddArg, idsToRemoveArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.updateMarkers"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<PlatformMarker> toAddArg = (List<PlatformMarker>) args.get(0);
                List<PlatformMarker> toChangeArg = (List<PlatformMarker>) args.get(1);
                List<String> idsToRemoveArg = (List<String>) args.get(2);
                try {
                  api.updateMarkers(toAddArg, toChangeArg, idsToRemoveArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.updatePolygons"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<PlatformPolygon> toAddArg = (List<PlatformPolygon>) args.get(0);
                List<PlatformPolygon> toChangeArg = (List<PlatformPolygon>) args.get(1);
                List<String> idsToRemoveArg = (List<String>) args.get(2);
                try {
                  api.updatePolygons(toAddArg, toChangeArg, idsToRemoveArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.updatePolylines"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<PlatformPolyline> toAddArg = (List<PlatformPolyline>) args.get(0);
                List<PlatformPolyline> toChangeArg = (List<PlatformPolyline>) args.get(1);
                List<String> idsToRemoveArg = (List<String>) args.get(2);
                try {
                  api.updatePolylines(toAddArg, toChangeArg, idsToRemoveArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.updateTileOverlays"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<PlatformTileOverlay> toAddArg = (List<PlatformTileOverlay>) args.get(0);
                List<PlatformTileOverlay> toChangeArg = (List<PlatformTileOverlay>) args.get(1);
                List<String> idsToRemoveArg = (List<String>) args.get(2);
                try {
                  api.updateTileOverlays(toAddArg, toChangeArg, idsToRemoveArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.getScreenCoordinate"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlatformLatLng latLngArg = (PlatformLatLng) args.get(0);
                try {
                  PlatformPoint output = api.getScreenCoordinate(latLngArg);
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.getLatLng"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlatformPoint screenCoordinateArg = (PlatformPoint) args.get(0);
                try {
                  PlatformLatLng output = api.getLatLng(screenCoordinateArg);
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.getVisibleRegion"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  PlatformLatLngBounds output = api.getVisibleRegion();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.moveCamera"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlatformCameraUpdate cameraUpdateArg = (PlatformCameraUpdate) args.get(0);
                try {
                  api.moveCamera(cameraUpdateArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.animateCamera"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlatformCameraUpdate cameraUpdateArg = (PlatformCameraUpdate) args.get(0);
                try {
                  api.animateCamera(cameraUpdateArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.getZoomLevel"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Double output = api.getZoomLevel();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.showInfoWindow"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String markerIdArg = (String) args.get(0);
                try {
                  api.showInfoWindow(markerIdArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.hideInfoWindow"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String markerIdArg = (String) args.get(0);
                try {
                  api.hideInfoWindow(markerIdArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.isInfoWindowShown"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String markerIdArg = (String) args.get(0);
                try {
                  Boolean output = api.isInfoWindowShown(markerIdArg);
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.setStyle"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String styleArg = (String) args.get(0);
                try {
                  Boolean output = api.setStyle(styleArg);
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.didLastStyleSucceed"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.didLastStyleSucceed();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.clearTileCache"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String tileOverlayIdArg = (String) args.get(0);
                try {
                  api.clearTileCache(tileOverlayIdArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsApi.takeSnapshot"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<byte[]> resultCallback =
                    new Result<byte[]>() {
                      public void success(byte[] result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.takeSnapshot(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class MapsCallbackApi {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public MapsCallbackApi(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }

    public MapsCallbackApi(
        @NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /** Public interface for sending reply. */
    /** The codec used by MapsCallbackApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /** Called when the map camera starts moving. */
    public void onCameraMoveStarted(@NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onCameraMoveStarted"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          null,
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when the map camera moves. */
    public void onCameraMove(
        @NonNull PlatformCameraPosition cameraPositionArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onCameraMove"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(cameraPositionArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when the map camera stops moving. */
    public void onCameraIdle(@NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onCameraIdle"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          null,
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when the map, not a specifc map object, is tapped. */
    public void onTap(@NonNull PlatformLatLng positionArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onTap"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(positionArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when the map, not a specifc map object, is long pressed. */
    public void onLongPress(@NonNull PlatformLatLng positionArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onLongPress"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(positionArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when a marker is tapped. */
    public void onMarkerTap(@NonNull String markerIdArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onMarkerTap"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(markerIdArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when a marker drag starts. */
    public void onMarkerDragStart(
        @NonNull String markerIdArg,
        @NonNull PlatformLatLng positionArg,
        @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onMarkerDragStart"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(markerIdArg, positionArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when a marker drag updates. */
    public void onMarkerDrag(
        @NonNull String markerIdArg,
        @NonNull PlatformLatLng positionArg,
        @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onMarkerDrag"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(markerIdArg, positionArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when a marker drag ends. */
    public void onMarkerDragEnd(
        @NonNull String markerIdArg,
        @NonNull PlatformLatLng positionArg,
        @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onMarkerDragEnd"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(markerIdArg, positionArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when a marker's info window is tapped. */
    public void onInfoWindowTap(@NonNull String markerIdArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onInfoWindowTap"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(markerIdArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when a circle is tapped. */
    public void onCircleTap(@NonNull String circleIdArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onCircleTap"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(circleIdArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when a marker cluster is tapped. */
    public void onClusterTap(@NonNull PlatformCluster clusterArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onClusterTap"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(clusterArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when a polygon is tapped. */
    public void onPolygonTap(@NonNull String polygonIdArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onPolygonTap"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(polygonIdArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called when a polyline is tapped. */
    public void onPolylineTap(@NonNull String polylineIdArg, @NonNull VoidResult result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.onPolylineTap"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(polylineIdArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else {
                result.success();
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
    /** Called to get data for a map tile. */
    public void getTileOverlayTile(
        @NonNull String tileOverlayIdArg,
        @NonNull PlatformPoint locationArg,
        @NonNull Long zoomArg,
        @NonNull Result<PlatformTile> result) {
      final String channelName =
          "dev.flutter.pigeon.google_maps_flutter_android.MapsCallbackApi.getTileOverlayTile"
              + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Arrays.asList(tileOverlayIdArg, locationArg, zoomArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(
                    new FlutterError(
                        (String) listReply.get(0),
                        (String) listReply.get(1),
                        (String) listReply.get(2)));
              } else if (listReply.get(0) == null) {
                result.error(
                    new FlutterError(
                        "null-error",
                        "Flutter api returned null value for non-null return value.",
                        ""));
              } else {
                @SuppressWarnings("ConstantConditions")
                PlatformTile output = (PlatformTile) listReply.get(0);
                result.success(output);
              }
            } else {
              result.error(createConnectionError(channelName));
            }
          });
    }
  }
  /**
   * Interface for global SDK initialization.
   *
   * <p>Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface MapsInitializerApi {
    /**
     * Initializes the Google Maps SDK with the given renderer preference.
     *
     * <p>A null renderer preference will result in the default renderer.
     *
     * <p>Calling this more than once in the lifetime of an application will result in an error.
     */
    void initializeWithPreferredRenderer(
        @Nullable PlatformRendererType type, @NonNull Result<PlatformRendererType> result);

    /** The codec used by MapsInitializerApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `MapsInitializerApi` to handle messages through the `binaryMessenger`.
     */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable MapsInitializerApi api) {
      setUp(binaryMessenger, "", api);
    }

    static void setUp(
        @NonNull BinaryMessenger binaryMessenger,
        @NonNull String messageChannelSuffix,
        @Nullable MapsInitializerApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInitializerApi.initializeWithPreferredRenderer"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlatformRendererType typeArg = (PlatformRendererType) args.get(0);
                Result<PlatformRendererType> resultCallback =
                    new Result<PlatformRendererType>() {
                      public void success(PlatformRendererType result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.initializeWithPreferredRenderer(typeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /**
   * Dummy interface to force generation of the platform view creation params, which are not used in
   * any Pigeon calls, only the platform view creation call made internally by Flutter.
   *
   * <p>Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface MapsPlatformViewApi {

    void createView(@Nullable PlatformMapViewCreationParams type);

    /** The codec used by MapsPlatformViewApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `MapsPlatformViewApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable MapsPlatformViewApi api) {
      setUp(binaryMessenger, "", api);
    }

    static void setUp(
        @NonNull BinaryMessenger binaryMessenger,
        @NonNull String messageChannelSuffix,
        @Nullable MapsPlatformViewApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsPlatformViewApi.createView"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PlatformMapViewCreationParams typeArg = (PlatformMapViewCreationParams) args.get(0);
                try {
                  api.createView(typeArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /**
   * Inspector API only intended for use in integration tests.
   *
   * <p>Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface MapsInspectorApi {

    @NonNull
    Boolean areBuildingsEnabled();

    @NonNull
    Boolean areRotateGesturesEnabled();

    @NonNull
    Boolean areZoomControlsEnabled();

    @NonNull
    Boolean areScrollGesturesEnabled();

    @NonNull
    Boolean areTiltGesturesEnabled();

    @NonNull
    Boolean areZoomGesturesEnabled();

    @NonNull
    Boolean isCompassEnabled();

    @Nullable
    Boolean isLiteModeEnabled();

    @NonNull
    Boolean isMapToolbarEnabled();

    @NonNull
    Boolean isMyLocationButtonEnabled();

    @NonNull
    Boolean isTrafficEnabled();

    @Nullable
    PlatformTileLayer getTileOverlayInfo(@NonNull String tileOverlayId);

    @NonNull
    PlatformZoomRange getZoomRange();

    @NonNull
    List<PlatformCluster> getClusters(@NonNull String clusterManagerId);

    /** The codec used by MapsInspectorApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `MapsInspectorApi` to handle messages through the `binaryMessenger`.
     */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable MapsInspectorApi api) {
      setUp(binaryMessenger, "", api);
    }

    static void setUp(
        @NonNull BinaryMessenger binaryMessenger,
        @NonNull String messageChannelSuffix,
        @Nullable MapsInspectorApi api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.areBuildingsEnabled"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.areBuildingsEnabled();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.areRotateGesturesEnabled"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.areRotateGesturesEnabled();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.areZoomControlsEnabled"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.areZoomControlsEnabled();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.areScrollGesturesEnabled"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.areScrollGesturesEnabled();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.areTiltGesturesEnabled"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.areTiltGesturesEnabled();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.areZoomGesturesEnabled"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.areZoomGesturesEnabled();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.isCompassEnabled"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isCompassEnabled();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.isLiteModeEnabled"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isLiteModeEnabled();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.isMapToolbarEnabled"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isMapToolbarEnabled();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.isMyLocationButtonEnabled"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isMyLocationButtonEnabled();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.isTrafficEnabled"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Boolean output = api.isTrafficEnabled();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.getTileOverlayInfo"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String tileOverlayIdArg = (String) args.get(0);
                try {
                  PlatformTileLayer output = api.getTileOverlayInfo(tileOverlayIdArg);
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.getZoomRange"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  PlatformZoomRange output = api.getZoomRange();
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.google_maps_flutter_android.MapsInspectorApi.getClusters"
                    + messageChannelSuffix,
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String clusterManagerIdArg = (String) args.get(0);
                try {
                  List<PlatformCluster> output = api.getClusters(clusterManagerIdArg);
                  wrapped.add(0, output);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
